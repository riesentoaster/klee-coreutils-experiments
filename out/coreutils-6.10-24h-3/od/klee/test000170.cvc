n_args0  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
A_data_stat1  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
B_data_stat2  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdin_stat3  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdout_stat4  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg005  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr16  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg017  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg028  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr29  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdin10  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr311  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr512  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr713  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2514  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr815  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4116  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5517  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1018  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
A_data19  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5820  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5921  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6022  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6823  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6924  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
B_data25  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8326  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8627  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr9328  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr9729  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr10430  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2131  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr11332  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr12533  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr12734  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2935  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr12936  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr13137  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr13538  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr14039  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr14240  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr14741  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr15042  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr15643  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr15844  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr16045  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr16346  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr16847  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr17148  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr17549  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr17850  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr18051  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr18252  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr18353  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr18954  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr19055  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr20356  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr21357  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr21458  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr22759  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr23060  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr23161  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr23262  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr23463  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr23764  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr23965  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr25766  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr25967  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr26368  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr26569  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr27970  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr28271  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr28372  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr28473  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr28574  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr28675  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr28776  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr28877  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr28978  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr29079  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr29180  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr29281  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr29482  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr29583  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr29684  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr29785  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr29886  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr29987  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr30188  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr30289  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr30390  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr30491  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
%----------------------------------------------------
ASSERT( BVGT(0x00000004,(n_args0[0x00000003] @ (n_args0[0x00000002] @ (n_args0[0x00000001] @ n_args0[0x00000000]
)
)
))
 );
ASSERT( SBVGT((n_args0[0x00000003] @ (n_args0[0x00000002] @ (n_args0[0x00000001] @ n_args0[0x00000000]
)
)
),0x00000000)
 );
ASSERT( ( NOT( ((((0x01 = n_args0[0x00000000]
) AND (0x00 = n_args0[0x00000001]
)
) AND (0x00 = n_args0[0x00000002]
)
) AND (0x00 = n_args0[0x00000003]
)
))) );
ASSERT( ( NOT( ((((0x02 = n_args0[0x00000000]
) AND (0x00 = n_args0[0x00000001]
)
) AND (0x00 = n_args0[0x00000002]
)
) AND (0x00 = n_args0[0x00000003]
)
))) );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (A_data_stat1[0x0000000B] @ (A_data_stat1[0x0000000A] @ (A_data_stat1[0x00000009] @ A_data_stat1[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(A_data_stat1[0x0000003F] @ (A_data_stat1[0x0000003E] @ (A_data_stat1[0x0000003D] @ (A_data_stat1[0x0000003C] @ (A_data_stat1[0x0000003B] @ (A_data_stat1[0x0000003A] @ (A_data_stat1[0x00000039] @ A_data_stat1[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (B_data_stat2[0x0000000B] @ (B_data_stat2[0x0000000A] @ (B_data_stat2[0x00000009] @ B_data_stat2[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(B_data_stat2[0x0000003F] @ (B_data_stat2[0x0000003E] @ (B_data_stat2[0x0000003D] @ (B_data_stat2[0x0000003C] @ (B_data_stat2[0x0000003B] @ (B_data_stat2[0x0000003A] @ (B_data_stat2[0x00000039] @ B_data_stat2[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (stdin_stat3[0x0000000B] @ (stdin_stat3[0x0000000A] @ (stdin_stat3[0x00000009] @ stdin_stat3[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(stdin_stat3[0x0000003F] @ (stdin_stat3[0x0000003E] @ (stdin_stat3[0x0000003D] @ (stdin_stat3[0x0000003C] @ (stdin_stat3[0x0000003B] @ (stdin_stat3[0x0000003A] @ (stdin_stat3[0x00000039] @ stdin_stat3[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (stdout_stat4[0x0000000B] @ (stdout_stat4[0x0000000A] @ (stdout_stat4[0x00000009] @ stdout_stat4[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(stdout_stat4[0x0000003F] @ (stdout_stat4[0x0000003E] @ (stdout_stat4[0x0000003D] @ (stdout_stat4[0x0000003C] @ (stdout_stat4[0x0000003B] @ (stdout_stat4[0x0000003A] @ (stdout_stat4[0x00000039] @ stdout_stat4[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( (0x2D = arg017[0x00000000]
) );
ASSERT( (0x2D = arg017[0x00000001]
) );
ASSERT( (0x73 = arg017[0x00000002]
) );
ASSERT( (0x6B = arg017[0x00000003]
) );
ASSERT( (0x69 = arg017[0x00000004]
) );
ASSERT( (0x70 = arg017[0x00000005]
) );
ASSERT( (0x2D = arg017[0x00000006]
) );
ASSERT( (0x62 = arg017[0x00000007]
) );
ASSERT( (0x79 = arg017[0x00000008]
) );
ASSERT( (0x74 = arg017[0x00000009]
) );
ASSERT( (0x2B = arg028[0x00000000]
) );
ASSERT( (0x30 = arg028[0x00000001]
) );
ASSERT( (0x00000078 = (0x00000020 | BVSX(arg028[0x00000002],32)

)
) );
ASSERT( ( NOT( SBVGT((0x000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg028[0x00000003],32)
)
[7:0]
),0x00000009)
)) );
ASSERT( ( NOT( SBVGT((0x000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg028[0x00000004],32)
)
[7:0]
),0x00000009)
)) );
ASSERT( ( NOT( SBVGT((0x000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg028[0x00000005],32)
)
[7:0]
),0x00000009)
)) );
ASSERT( SBVGT((0x000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg028[0x00000006],32)
)
[7:0]
),0x00000009)
 );
ASSERT( ( NOT( SBVGT(0x00000041,BVSX(arg028[0x00000006],32)
)
)) );
ASSERT( ( NOT( SBVGT(0x00000010,(0x000000 @ BVPLUS(32, 
0xFFFFFFA9, 
(0x00000020 | BVSX(arg028[0x00000006],32)

))
[7:0]
))
)) );
ASSERT( (0x47 = BVSX(arg028[0x00000006],32)
[7:0]
) );
ASSERT( (0x69 = arg028[0x00000007]
) );
ASSERT( (LET let_k_0 = BVPLUS(64, 
(BVPLUS(64, 
((0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg028[0x00000003],32)
)
[7:0]
)[59:0] @ 0x0
), 
(0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg028[0x00000004],32)
)
[7:0]
))
[59:0] @ 0x0
), 
(0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg028[0x00000005],32)
)
[7:0]
))
,
let_k_1 = IF(BVGT(BVMULT(128, 
0x00000000000000000000000000000400, 
(0x0000000000000000 @ let_k_0
))
,0x0000000000000000FFFFFFFFFFFFFFFF)
)
THEN 0xFFFFFFFFFFFFFFFF
ELSE (let_k_0[53:0] @ 0b0000000000
)
ENDIF,
let_k_2 = BVGT(BVMULT(128, 
0x00000000000000000000000000000400, 
(0x0000000000000000 @ let_k_1
))
,0x0000000000000000FFFFFFFFFFFFFFFF)
,
let_k_3 = BVGT(BVMULT(128, 
0x00000000000000000000000000000400, 
(0x0000000000000000 @ let_k_0
))
,0x0000000000000000FFFFFFFFFFFFFFFF)
,
let_k_4 = (IF(BVGT(BVMULT(128, 
0x00000000000000000000000000000400, 
(0x0000000000000000 @ IF(let_k_2)
THEN 0xFFFFFFFFFFFFFFFF
ELSE (let_k_1[53:0] @ 0b0000000000
)
ENDIF
))
,0x0000000000000000FFFFFFFFFFFFFFFF)
)
THEN 0x00000001
ELSE 0x00000000
ENDIF | (IF(let_k_2)
THEN 0x00000001
ELSE 0x00000000
ENDIF | IF(let_k_3)
THEN 0x00000001
ELSE 0x00000000
ENDIF
)
) IN 
(0x00000000 = IF((0x00 = (arg028 WITH [0x0000000A] := 0x00)
[BVPLUS(64, 
0x0000000000000006, 
IF((0x42 = arg028[0x00000008]
))
THEN 0x0000000000000003
ELSE 0x0000000000000001
ENDIF)
[31:0]]
))
THEN let_k_4
ELSE (0x00000002 | let_k_4
)
ENDIF
))  );
ASSERT( (0x2F = arg005[0x00000000]
) );
ASSERT( (0x74 = arg005[0x00000001]
) );
ASSERT( (0x6D = arg005[0x00000002]
) );
ASSERT( (0x70 = arg005[0x00000003]
) );
ASSERT( (0x2F = arg005[0x00000004]
) );
ASSERT( (0x73 = arg005[0x00000005]
) );
ASSERT( (0x61 = arg005[0x00000006]
) );
ASSERT( (0x6E = arg005[0x00000007]
) );
ASSERT( (0x64 = arg005[0x00000008]
) );
ASSERT( (0x62 = arg005[0x00000009]
) );
ASSERT( (LET let_k_0 = BVPLUS(64, 
(BVPLUS(64, 
((0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg028[0x00000003],32)
)
[7:0]
)[59:0] @ 0x0
), 
(0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg028[0x00000004],32)
)
[7:0]
))
[59:0] @ 0x0
), 
(0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg028[0x00000005],32)
)
[7:0]
))
,
let_k_1 = IF(BVGT(BVMULT(128, 
0x00000000000000000000000000000400, 
(0x0000000000000000 @ let_k_0
))
,0x0000000000000000FFFFFFFFFFFFFFFF)
)
THEN 0xFFFFFFFFFFFFFFFF
ELSE (let_k_0[53:0] @ 0b0000000000
)
ENDIF,
let_k_2 = IF(BVGT(BVMULT(128, 
0x00000000000000000000000000000400, 
(0x0000000000000000 @ let_k_1
))
,0x0000000000000000FFFFFFFFFFFFFFFF)
)
THEN 0xFFFFFFFFFFFFFFFF
ELSE (let_k_1[53:0] @ 0b0000000000
)
ENDIF IN 
(0x0000000000000000 = IF(BVGT(BVMULT(128, 
0x00000000000000000000000000000400, 
(0x0000000000000000 @ let_k_2
))
,0x0000000000000000FFFFFFFFFFFFFFFF)
)
THEN 0xFFFFFFFFFFFFFFFF
ELSE (let_k_2[53:0] @ 0b0000000000
)
ENDIF
))  );
%----------------------------------------------------
QUERY( FALSE  );
