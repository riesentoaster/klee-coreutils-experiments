array A_data_stat[144] : w32 -> w8 = symbolic
array B_data_stat[144] : w32 -> w8 = symbolic
array arg00[11] : w32 -> w8 = symbolic
array arg01[11] : w32 -> w8 = symbolic
array arg02[11] : w32 -> w8 = symbolic
array const_arr1[768] : w32 -> w
array n_args[4] : w32 -> w8 = symbolic
array stdin_stat[144] : w32 -> w8 = symbolic
array stdout_stat[144] : w32 -> w8 = symbolic
(query [(Ult N0:(ReadLSB w32 0 n_args)
              4)
         (Slt 0 N0)
         (Eq false (Eq 1 N0))
         (Eq false (Eq 2 N0))
         (Eq false
             (Eq 0
                 (And w64 (ReadLSB w64 8 A_data_stat)
                          2147483647)))
         (Ult (ReadLSB w64 56 A_data_stat)
              65536)
         (Eq false
             (Eq 0
                 (And w64 (ReadLSB w64 8 B_data_stat)
                          2147483647)))
         (Ult (ReadLSB w64 56 B_data_stat)
              65536)
         (Eq false
             (Eq 0
                 (And w64 (ReadLSB w64 8 stdin_stat)
                          2147483647)))
         (Ult (ReadLSB w64 56 stdin_stat)
              65536)
         (Eq false
             (Eq 0
                 (And w64 (ReadLSB w64 8 stdout_stat)
                          2147483647)))
         (Ult (ReadLSB w64 56 stdout_stat)
              65536)
         (Eq 37 (Read w8 0 arg00))
         (Eq 42 (Read w8 5 arg00))
         (Or (Eq 39 N1:(Read w8 0 arg01))
             (Eq 34 N1))
         (Eq false
             (Eq 0 (Read w8 2 arg01)))
         (Eq false
             (Eq 0 (Read w8 3 arg01)))
         (Eq false
             (Eq 0 (Read w8 4 arg01)))
         (Eq false
             (Eq 0 (Read w8 5 arg01)))
         (Eq false
             (Eq 0 (Read w8 6 arg01)))
         (Eq false
             (Eq 0 (Read w8 7 arg01)))
         (Eq false
             (Eq 0 (Read w8 8 arg01)))
         (Eq false
             (Eq 0 (Read w8 9 arg01)))
         (Eq 46 (Read w8 6 arg00))
         (Eq false
             (Eq 42 N2:(Read w8 7 arg00)))
         (Ult (Add w32 4294967248 (SExt w32 N2))
              10)
         (Eq 117 (Read w8 8 arg00))
         (Eq false
             (Eq 34 N3:(Read w8 0 arg02)))
         (Eq false (Eq 39 N3))
         (Eq false
             (Eq 0
                 (And w32 (ZExt w32 (ReadLSB w16 N4:(Extract w32 0 (Add w64 256
                                                                            (Mul w64 2
                                                                                     (SExt w64 (SExt w32 N3))))) const_arr1))
                          8192)))
         (Eq 45 (Read w8 1 arg02))
         (Eq 48 (Read w8 2 arg02))
         (Eq 120
             (Or w32 (SExt w32 (Read w8 3 arg02))
                     32))
         (Sle (ZExt w32 N5:(Extract w8 0 (Add w32 4294967248
                                                  (SExt w32 (Read w8 4 arg02)))))
              9)
         (Sle (ZExt w32 N6:(Extract w8 0 (Add w32 4294967248
                                                  (SExt w32 (Read w8 5 arg02)))))
              9)
         (Sle (ZExt w32 N7:(Extract w8 0 (Add w32 4294967248
                                                  (SExt w32 (Read w8 6 arg02)))))
              9)
         (Sle (ZExt w32 N8:(Extract w8 0 (Add w32 4294967248
                                                  (SExt w32 (Read w8 7 arg02)))))
              9)
         (Sle (ZExt w32 N9:(Extract w8 0 (Add w32 4294967248
                                                  (SExt w32 (Read w8 8 arg02)))))
              9)
         (Sle (ZExt w32 N10:(Extract w8 0 (Add w32 4294967248
                                                   (SExt w32 (Read w8 9 arg02)))))
              9)
         (Eq 43 (Read w8 1 arg00))
         (Eq 39 (Read w8 2 arg00))
         (Eq 39 (Read w8 3 arg00))
         (Eq 39 (Read w8 4 arg00))
         (Eq false
             (Eq 0
                 (Extract w32 0 (LShr w64 (Sub w64 0
                                                   (Add w64 (Mul w64 16
                                                                     (Add w64 (Mul w64 16
                                                                                       (Add w64 (Mul w64 16
                                                                                                         (Add w64 (Mul w64 16
                                                                                                                           (Add w64 (Mul w64 16 (ZExt w64 N5))
                                                                                                                                    (ZExt w64 N6)))
                                                                                                                  (ZExt w64 N7)))
                                                                                                (ZExt w64 N8)))
                                                                              (ZExt w64 N9)))
                                                            (ZExt w64 N10)))
                                          32))))
         (Ult 20
              N11:(SExt w64 (Extract w32 0 (ZExt w64 (Read w8 1 arg01)))))
         (Eq false
             (Eq 1
                 N12:(Extract w32 0 (Add w64 18446744073709551596 N11))))
         (Eq false (Eq 2 N12))
         (Eq false (Eq 3 N12))
         (Eq false (Eq 4 N12))
         (Eq false (Eq 5 N12))
         (Eq false (Eq 6 N12))
         (Eq false (Eq 7 N12))
         (Eq false (Eq 8 N12))
         (Eq false (Eq 9 N12))
         (Eq false (Eq 10 N12))
         (Eq false (Eq 11 N12))
         (Eq false (Eq 12 N12))
         (Eq false (Eq 13 N12))
         (Eq false (Eq 14 N12))
         (Eq false (Eq 15 N12))
         (Eq false (Eq 16 N12))
         (Eq false (Eq 17 N12))
         (Eq false (Eq 18 N12))
         (Eq false (Eq 19 N12))
         (Eq false (Eq 20 N12))
         (Eq false (Eq 21 N12))
         (Eq false (Eq 22 N12))
         (Eq false (Eq 23 N12))
         (Eq false (Eq 24 N12))
         (Eq false (Eq 25 N12))
         (Eq false (Eq 26 N12))
         (Eq false (Eq 27 N12))
         (Eq false (Eq 28 N12))
         (Eq false (Eq 29 N12))
         (Eq false (Eq 30 N12))
         (Eq false (Eq 31 N12))
         (Eq false (Eq 32 N12))
         (Eq false (Eq 33 N12))
         (Eq false (Eq 34 N12))
         (Eq false (Eq 35 N12))
         (Eq false (Eq 36 N12))
         (Eq false (Eq 37 N12))
         (Eq false (Eq 38 N12))
         (Eq false (Eq 39 N12))
         (Eq false (Eq 40 N12))
         (Eq false (Eq 41 N12))
         (Eq false (Eq 42 N12))
         (Eq false (Eq 43 N12))
         (Eq false (Eq 44 N12))
         (Eq false (Eq 45 N12))
         (Eq false (Eq 46 N12))
         (Eq false (Eq 47 N12))
         (Eq false (Eq 48 N12))
         (Eq false (Eq 49 N12))
         (Eq false (Eq 50 N12))
         (Eq false (Eq 51 N12))
         (Eq false (Eq 52 N12))
         (Eq false (Eq 53 N12))
         (Eq false (Eq 54 N12))
         (Eq false (Eq 55 N12))
         (Eq false (Eq 56 N12))
         (Eq false (Eq 57 N12))
         (Eq false (Eq 58 N12))
         (Eq false (Eq 59 N12))
         (Eq false (Eq 60 N12))
         (Eq false (Eq 61 N12))
         (Eq false (Eq 62 N12))
         (Eq false (Eq 63 N12))
         (Eq false (Eq 64 N12))
         (Eq false (Eq 65 N12))
         (Eq false (Eq 66 N12))
         (Eq false (Eq 67 N12))
         (Eq false (Eq 68 N12))
         (Eq false (Eq 69 N12))
         (Eq false (Eq 70 N12))
         (Eq false (Eq 71 N12))
         (Eq false (Eq 72 N12))
         (Eq false (Eq 73 N12))
         (Eq false (Eq 74 N12))
         (Eq false (Eq 75 N12))
         (Eq false (Eq 76 N12))
         (Eq false (Eq 77 N12))
         (Eq false (Eq 78 N12))
         (Eq false (Eq 79 N12))
         (Eq false (Eq 80 N12))
         (Eq false (Eq 81 N12))
         (Eq false (Eq 82 N12))
         (Eq false (Eq 83 N12))
         (Eq false (Eq 84 N12))]
        false)
