n_args0  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
n_args_11  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
A_data_stat2  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdin_stat3  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdout_stat4  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg005  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg016  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg027  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg008  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr19  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr210  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr311  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr412  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr513  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr814  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1015  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1216  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2017  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2318  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2719  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3020  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3121  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3422  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3523  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3724  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3825  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4126  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4427  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4728  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4829  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5130  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5331  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5432  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5733  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6034  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6235  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6436  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6537  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6638  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6739  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6840  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7041  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7142  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7243  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7344  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7545  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7646  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8147  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8248  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8449  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8550  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr9451  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr9552  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr9653  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr9754  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr9855  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr9956  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr10057  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr10158  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr10259  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr10560  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr10661  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr10862  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr10963  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr11264  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr11365  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr11466  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr11567  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr11668  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr11869  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr11970  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr12071  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr12172  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr12273  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr12374  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr12475  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr12576  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr12777  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr12878  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr12979  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr13080  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr13181  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr13282  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr13483  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr13584  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr13785  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr13886  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr14187  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr14288  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr14389  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr14490  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr14591  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr14792  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr14993  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr15094  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr15195  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr15296  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr15497  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr15598  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr16099  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr162100  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr164101  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr165102  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr168103  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr169104  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr171105  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr172106  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr173107  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr174108  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr176109  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr178110  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr180111  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr181112  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr182113  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr183114  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr184115  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr185116  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr186117  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr187118  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr188119  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr189120  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr190121  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr191122  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr192123  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr194124  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr195125  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
A_data126  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr197127  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr198128  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr202129  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr203130  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
%----------------------------------------------------
ASSERT( BVGT(0x00000002,(n_args0[0x00000003] @ (n_args0[0x00000002] @ (n_args0[0x00000001] @ n_args0[0x00000000]
)
)
))
 );
ASSERT( SBVGT((n_args0[0x00000003] @ (n_args0[0x00000002] @ (n_args0[0x00000001] @ n_args0[0x00000000]
)
)
),0x00000000)
 );
ASSERT( BVGT(0x00000003,(n_args_11[0x00000003] @ (n_args_11[0x00000002] @ (n_args_11[0x00000001] @ n_args_11[0x00000000]
)
)
))
 );
ASSERT( SBVGT((n_args_11[0x00000003] @ (n_args_11[0x00000002] @ (n_args_11[0x00000001] @ n_args_11[0x00000000]
)
)
),0x00000000)
 );
ASSERT( ( NOT( ((((0x01 = n_args_11[0x00000000]
) AND (0x00 = n_args_11[0x00000001]
)
) AND (0x00 = n_args_11[0x00000002]
)
) AND (0x00 = n_args_11[0x00000003]
)
))) );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (A_data_stat2[0x0000000B] @ (A_data_stat2[0x0000000A] @ (A_data_stat2[0x00000009] @ A_data_stat2[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(A_data_stat2[0x0000003F] @ (A_data_stat2[0x0000003E] @ (A_data_stat2[0x0000003D] @ (A_data_stat2[0x0000003C] @ (A_data_stat2[0x0000003B] @ (A_data_stat2[0x0000003A] @ (A_data_stat2[0x00000039] @ A_data_stat2[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (stdin_stat3[0x0000000B] @ (stdin_stat3[0x0000000A] @ (stdin_stat3[0x00000009] @ stdin_stat3[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(stdin_stat3[0x0000003F] @ (stdin_stat3[0x0000003E] @ (stdin_stat3[0x0000003D] @ (stdin_stat3[0x0000003C] @ (stdin_stat3[0x0000003B] @ (stdin_stat3[0x0000003A] @ (stdin_stat3[0x00000039] @ stdin_stat3[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (stdout_stat4[0x0000000B] @ (stdout_stat4[0x0000000A] @ (stdout_stat4[0x00000009] @ stdout_stat4[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(stdout_stat4[0x0000003F] @ (stdout_stat4[0x0000003E] @ (stdout_stat4[0x0000003D] @ (stdout_stat4[0x0000003C] @ (stdout_stat4[0x0000003B] @ (stdout_stat4[0x0000003A] @ (stdout_stat4[0x00000039] @ stdout_stat4[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( (0x2D = arg005[0x00000000]
) );
ASSERT( (0x2D = arg005[0x00000001]
) );
ASSERT( (0x3D = arg005[0x00000003]
) );
ASSERT( (0x6D = arg005[0x00000002]
) );
ASSERT( ( NOT( (0x00 = arg005[0x00000004]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000005]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000006]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000007]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000008]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000009]
))) );
ASSERT( ( NOT( (0x2D = arg016[0x00000000]
))) );
ASSERT( (0x2E = arg027[0x00000000]
) );
ASSERT( (0x2F = arg027[0x00000001]
) );
ASSERT( ( NOT( (0b00110 = arg005[0x00000004][7:3]
))) );
ASSERT( (LET let_k_0 = arg005[0x00000004] IN 
((0x2D = let_k_0
) OR ((0x2B = let_k_0
) OR (0x3D = let_k_0
)
)
))  );
ASSERT( (LET let_k_0 = arg005[0x00000005] IN 
((0x2D = let_k_0
) OR ((0x2B = let_k_0
) OR (0x3D = let_k_0
)
)
))  );
ASSERT( (LET let_k_0 = arg005[0x00000006] IN 
((0x2D = let_k_0
) OR ((0x2B = let_k_0
) OR (0x3D = let_k_0
)
)
))  );
ASSERT( (LET let_k_0 = arg005[0x00000007] IN 
((0x2D = let_k_0
) OR ((0x2B = let_k_0
) OR (0x3D = let_k_0
)
)
))  );
ASSERT( (LET let_k_0 = arg005[0x00000008] IN 
((0x2D = let_k_0
) OR ((0x2B = let_k_0
) OR (0x3D = let_k_0
)
)
))  );
ASSERT( (LET let_k_0 = arg005[0x00000009] IN 
((0x2D = let_k_0
) OR ((0x2B = let_k_0
) OR (0x3D = let_k_0
)
)
))  );
ASSERT( (LET let_k_0 = arg005[0x00000004] IN 
((0x3D = let_k_0
) OR ((0x2D = let_k_0
) OR (0x2B = let_k_0
)
)
))  );
ASSERT( ( NOT( (0x67 = arg005[0x00000005]
))) );
ASSERT( ( NOT( (0x6F = arg005[0x00000005]
))) );
ASSERT( ( NOT( (0x75 = arg005[0x00000005]
))) );
ASSERT( ( NOT( (0x30 = arg005[0x00000005]
))) );
ASSERT( ( NOT( (0x31 = arg005[0x00000005]
))) );
ASSERT( ( NOT( (0x32 = arg005[0x00000005]
))) );
ASSERT( ( NOT( (0x33 = arg005[0x00000005]
))) );
ASSERT( ( NOT( (0x34 = arg005[0x00000005]
))) );
ASSERT( ( NOT( (0x35 = arg005[0x00000005]
))) );
ASSERT( ( NOT( (0x36 = arg005[0x00000005]
))) );
ASSERT( ( NOT( (0x37 = arg005[0x00000005]
))) );
ASSERT( ( NOT( (0x72 = arg005[0x00000005]
))) );
ASSERT( ( NOT( (0x73 = arg005[0x00000005]
))) );
ASSERT( ( NOT( (0x74 = arg005[0x00000005]
))) );
ASSERT( ( NOT( (0x77 = arg005[0x00000005]
))) );
ASSERT( ( NOT( (0x78 = arg005[0x00000005]
))) );
ASSERT( ( NOT( (0x58 = arg005[0x00000005]
))) );
%----------------------------------------------------
QUERY( FALSE  );
