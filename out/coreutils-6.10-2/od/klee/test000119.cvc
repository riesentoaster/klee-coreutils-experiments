n_args0  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
A_data_stat1  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
B_data_stat2  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdin_stat3  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdout_stat4  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg005  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr16  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg017  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg028  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr29  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdin10  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr311  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr512  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr713  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1914  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
A_data15  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2616  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2217  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3918  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4219  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4920  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5921  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6622  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6723  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr624  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
B_data25  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7326  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8127  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr9328  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr9729  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr10130  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr10731  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr11232  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr12033  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr12234  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr12835  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr836  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr13037  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr13138  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3639  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr14240  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
%----------------------------------------------------
ASSERT( ((((0x01 = n_args0[0x00000000]
) AND (0x00 = n_args0[0x00000001]
)
) AND (0x00 = n_args0[0x00000002]
)
) AND (0x00 = n_args0[0x00000003]
)
) );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (A_data_stat1[0x0000000B] @ (A_data_stat1[0x0000000A] @ (A_data_stat1[0x00000009] @ A_data_stat1[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(A_data_stat1[0x0000003F] @ (A_data_stat1[0x0000003E] @ (A_data_stat1[0x0000003D] @ (A_data_stat1[0x0000003C] @ (A_data_stat1[0x0000003B] @ (A_data_stat1[0x0000003A] @ (A_data_stat1[0x00000039] @ A_data_stat1[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (B_data_stat2[0x0000000B] @ (B_data_stat2[0x0000000A] @ (B_data_stat2[0x00000009] @ B_data_stat2[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(B_data_stat2[0x0000003F] @ (B_data_stat2[0x0000003E] @ (B_data_stat2[0x0000003D] @ (B_data_stat2[0x0000003C] @ (B_data_stat2[0x0000003B] @ (B_data_stat2[0x0000003A] @ (B_data_stat2[0x00000039] @ B_data_stat2[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (stdin_stat3[0x0000000B] @ (stdin_stat3[0x0000000A] @ (stdin_stat3[0x00000009] @ stdin_stat3[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(stdin_stat3[0x0000003F] @ (stdin_stat3[0x0000003E] @ (stdin_stat3[0x0000003D] @ (stdin_stat3[0x0000003C] @ (stdin_stat3[0x0000003B] @ (stdin_stat3[0x0000003A] @ (stdin_stat3[0x00000039] @ stdin_stat3[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (stdout_stat4[0x0000000B] @ (stdout_stat4[0x0000000A] @ (stdout_stat4[0x00000009] @ stdout_stat4[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(stdout_stat4[0x0000003F] @ (stdout_stat4[0x0000003E] @ (stdout_stat4[0x0000003D] @ (stdout_stat4[0x0000003C] @ (stdout_stat4[0x0000003B] @ (stdout_stat4[0x0000003A] @ (stdout_stat4[0x00000039] @ stdout_stat4[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( (0x2D = arg005[0x00000000]
) );
ASSERT( (0x2D = arg005[0x00000001]
) );
ASSERT( (0x3D = arg005[0x00000003]
) );
ASSERT( (0x72 = arg005[0x00000002]
) );
ASSERT( ( NOT( (0x00 = arg005[0x00000006]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000007]
))) );
ASSERT( (0x00 = arg005[0x00000008]
) );
ASSERT( (0x2B = arg005[0x00000004]
) );
ASSERT( (0x30 = arg005[0x00000005]
) );
ASSERT( (0x00000078 = (0x00000020 | BVSX(arg005[0x00000006],32)

)
) );
ASSERT( ( NOT( SBVGT((0x000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000007],32)
)
[7:0]
),0x00000009)
)) );
ASSERT( ( NOT( (0x00 = BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000007],32)
)
[7:0]
))) );
ASSERT( (LET let_k_0 = (0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000007],32)
)
[7:0]
),
let_k_1 = IF(BVGT(0x0000000000000010,let_k_0)
)
THEN let_k_0
ELSE 0x0000000000000010
ENDIF IN 
( NOT( (0x0000000000000001 = IF(BVGT(let_k_1,0x000000000000000C)
)
THEN 0x000000000000000C
ELSE let_k_1
ENDIF
))))  );
ASSERT( (LET let_k_0 = (0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000007],32)
)
[7:0]
),
let_k_1 = IF(BVGT(0x0000000000000010,let_k_0)
)
THEN let_k_0
ELSE 0x0000000000000010
ENDIF IN 
( NOT( (0x0000000000000002 = IF(BVGT(let_k_1,0x000000000000000C)
)
THEN 0x000000000000000C
ELSE let_k_1
ENDIF
))))  );
ASSERT( (LET let_k_0 = (0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000007],32)
)
[7:0]
),
let_k_1 = IF(BVGT(0x0000000000000010,let_k_0)
)
THEN let_k_0
ELSE 0x0000000000000010
ENDIF IN 
( NOT( (0x0000000000000003 = IF(BVGT(let_k_1,0x000000000000000C)
)
THEN 0x000000000000000C
ELSE let_k_1
ENDIF
))))  );
ASSERT( (LET let_k_0 = (0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000007],32)
)
[7:0]
),
let_k_1 = IF(BVGT(0x0000000000000010,let_k_0)
)
THEN let_k_0
ELSE 0x0000000000000010
ENDIF IN 
( NOT( (0x0000000000000004 = IF(BVGT(let_k_1,0x000000000000000C)
)
THEN 0x000000000000000C
ELSE let_k_1
ENDIF
))))  );
ASSERT( (LET let_k_0 = (0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000007],32)
)
[7:0]
),
let_k_1 = IF(BVGT(0x0000000000000010,let_k_0)
)
THEN let_k_0
ELSE 0x0000000000000010
ENDIF IN 
( NOT( (0x0000000000000005 = IF(BVGT(let_k_1,0x000000000000000C)
)
THEN 0x000000000000000C
ELSE let_k_1
ENDIF
))))  );
ASSERT( (LET let_k_0 = (0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000007],32)
)
[7:0]
),
let_k_1 = IF(BVGT(0x0000000000000010,let_k_0)
)
THEN let_k_0
ELSE 0x0000000000000010
ENDIF IN 
( NOT( (0x0000000000000006 = IF(BVGT(let_k_1,0x000000000000000C)
)
THEN 0x000000000000000C
ELSE let_k_1
ENDIF
))))  );
ASSERT( (LET let_k_0 = (0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000007],32)
)
[7:0]
),
let_k_1 = IF(BVGT(0x0000000000000010,let_k_0)
)
THEN let_k_0
ELSE 0x0000000000000010
ENDIF IN 
( NOT( (0x0000000000000007 = IF(BVGT(let_k_1,0x000000000000000C)
)
THEN 0x000000000000000C
ELSE let_k_1
ENDIF
))))  );
ASSERT( (LET let_k_0 = (0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000007],32)
)
[7:0]
),
let_k_1 = IF(BVGT(0x0000000000000010,let_k_0)
)
THEN let_k_0
ELSE 0x0000000000000010
ENDIF IN 
( NOT( (0x0000000000000008 = IF(BVGT(let_k_1,0x000000000000000C)
)
THEN 0x000000000000000C
ELSE let_k_1
ENDIF
))))  );
%----------------------------------------------------
QUERY( FALSE  );
