n_args0  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
A_data_stat1  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
B_data_stat2  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdin_stat3  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdout_stat4  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg005  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr16  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg017  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg028  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr29  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdin10  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr311  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr512  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr713  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
A_data14  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2915  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4516  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
B_data17  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5118  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5419  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr820  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5821  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6222  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6623  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6724  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7025  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7226  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7427  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8228  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8329  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8430  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1331  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8632  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8833  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8934  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr9035  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr9736  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5237  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr10638  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr11939  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr12140  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr12541  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr13142  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr13343  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr13444  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr15245  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr15346  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr15547  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr16048  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8049  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr16850  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr16951  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr17752  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr18153  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr18454  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr19255  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr19656  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr19757  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr20158  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr21159  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr21660  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr22061  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr22562  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr22663  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr22964  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr23065  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr23166  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr23267  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr23368  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr23469  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr23570  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr23671  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr24572  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr25173  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr25574  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr25675  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr25776  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr25877  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr26978  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr27279  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr27380  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr27481  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr27582  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr28183  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr28384  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr28585  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr28686  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr28887  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr28988  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr29289  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr29390  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr29491  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
%----------------------------------------------------
ASSERT( ((((0x02 = n_args0[0x00000000]
) AND (0x00 = n_args0[0x00000001]
)
) AND (0x00 = n_args0[0x00000002]
)
) AND (0x00 = n_args0[0x00000003]
)
) );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (A_data_stat1[0x0000000B] @ (A_data_stat1[0x0000000A] @ (A_data_stat1[0x00000009] @ A_data_stat1[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(A_data_stat1[0x0000003F] @ (A_data_stat1[0x0000003E] @ (A_data_stat1[0x0000003D] @ (A_data_stat1[0x0000003C] @ (A_data_stat1[0x0000003B] @ (A_data_stat1[0x0000003A] @ (A_data_stat1[0x00000039] @ A_data_stat1[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (B_data_stat2[0x0000000B] @ (B_data_stat2[0x0000000A] @ (B_data_stat2[0x00000009] @ B_data_stat2[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(B_data_stat2[0x0000003F] @ (B_data_stat2[0x0000003E] @ (B_data_stat2[0x0000003D] @ (B_data_stat2[0x0000003C] @ (B_data_stat2[0x0000003B] @ (B_data_stat2[0x0000003A] @ (B_data_stat2[0x00000039] @ B_data_stat2[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (stdin_stat3[0x0000000B] @ (stdin_stat3[0x0000000A] @ (stdin_stat3[0x00000009] @ stdin_stat3[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(stdin_stat3[0x0000003F] @ (stdin_stat3[0x0000003E] @ (stdin_stat3[0x0000003D] @ (stdin_stat3[0x0000003C] @ (stdin_stat3[0x0000003B] @ (stdin_stat3[0x0000003A] @ (stdin_stat3[0x00000039] @ stdin_stat3[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (stdout_stat4[0x0000000B] @ (stdout_stat4[0x0000000A] @ (stdout_stat4[0x00000009] @ stdout_stat4[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(stdout_stat4[0x0000003F] @ (stdout_stat4[0x0000003E] @ (stdout_stat4[0x0000003D] @ (stdout_stat4[0x0000003C] @ (stdout_stat4[0x0000003B] @ (stdout_stat4[0x0000003A] @ (stdout_stat4[0x00000039] @ stdout_stat4[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( (0x2D = arg005[0x00000000]
) );
ASSERT( (0x00 = arg005[0x00000001]
) );
ASSERT( (0x2D = arg017[0x00000000]
) );
ASSERT( (0x2D = arg017[0x00000001]
) );
ASSERT( (0x3D = arg017[0x00000004]
) );
ASSERT( (0x66 = arg017[0x00000002]
) );
ASSERT( (0x6F = arg017[0x00000003]
) );
ASSERT( ( NOT( (0x00 = arg017[0x00000006]
))) );
ASSERT( ( NOT( (0x00 = arg017[0x00000007]
))) );
ASSERT( ( NOT( (0x00 = arg017[0x00000008]
))) );
ASSERT( ( NOT( (0x00 = arg017[0x00000009]
))) );
ASSERT( (0x61 = arg017[0x00000005]
) );
ASSERT( (LET let_k_0 = (arg017 WITH [0x0000000A] := 0x00)
[BVPLUS(64, 
0x0000000000000006, 
IF((0x7A = arg017[0x00000006]
))
THEN 0x0000000000000001
ELSE 0x0000000000000000
ENDIF)
[31:0]] IN 
((0x78 = let_k_0
) OR ((0x75 = let_k_0
) OR ((0x6F = let_k_0
) OR (0x64 = let_k_0
)
)
)
))  );
ASSERT( ( NOT( (0x43 = (arg017 WITH [0x0000000A] := 0x00)
[BVPLUS(64, 
0x0000000000000007, 
IF((0x7A = arg017[0x00000006]
))
THEN 0x0000000000000001
ELSE 0x0000000000000000
ENDIF)
[31:0]]
))) );
ASSERT( ( NOT( (0x49 = (arg017 WITH [0x0000000A] := 0x00)
[BVPLUS(64, 
0x0000000000000007, 
IF((0x7A = arg017[0x00000006]
))
THEN 0x0000000000000001
ELSE 0x0000000000000000
ENDIF)
[31:0]]
))) );
ASSERT( ( NOT( (0x4C = (arg017 WITH [0x0000000A] := 0x00)
[BVPLUS(64, 
0x0000000000000007, 
IF((0x7A = arg017[0x00000006]
))
THEN 0x0000000000000001
ELSE 0x0000000000000000
ENDIF)
[31:0]]
))) );
ASSERT( ( NOT( (0x53 = (arg017 WITH [0x0000000A] := 0x00)
[BVPLUS(64, 
0x0000000000000007, 
IF((0x7A = arg017[0x00000006]
))
THEN 0x0000000000000001
ELSE 0x0000000000000000
ENDIF)
[31:0]]
))) );
ASSERT( BVGT(0x0000000A,BVPLUS(32, 
0xFFFFFFD0, 
BVSX((arg017 WITH [0x0000000A] := 0x00)
[BVPLUS(64, 
0x0000000000000007, 
IF((0x7A = arg017[0x00000006]
))
THEN 0x0000000000000001
ELSE 0x0000000000000000
ENDIF)
[31:0]],32)
)
)
 );
ASSERT( BVGT(0x0000000A,BVPLUS(32, 
0xFFFFFFD0, 
BVSX((arg017 WITH [0x0000000A] := 0x00)
[BVPLUS(64, 
0x0000000000000008, 
IF((0x7A = arg017[0x00000006]
))
THEN 0x0000000000000001
ELSE 0x0000000000000000
ENDIF)
[31:0]],32)
)
)
 );
ASSERT( BVGT(0x0000000A,BVPLUS(32, 
0xFFFFFFD0, 
BVSX((arg017 WITH [0x0000000A] := 0x00)
[BVPLUS(64, 
0x0000000000000009, 
IF((0x7A = arg017[0x00000006]
))
THEN 0x0000000000000001
ELSE 0x0000000000000000
ENDIF)
[31:0]],32)
)
)
 );
ASSERT( (LET let_k_0 = BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX((arg017 WITH [0x0000000A] := 0x00)
[BVPLUS(64, 
0x0000000000000007, 
IF((0x7A = arg017[0x00000006]
))
THEN 0x0000000000000001
ELSE 0x0000000000000000
ENDIF)
[31:0]],32)
)
,64)
,
let_k_1 = (arg017 WITH [0x0000000A] := 0x00)
,
let_k_2 = IF((0x7A = arg017[0x00000006]
))
THEN 0x0000000000000001
ELSE 0x0000000000000000
ENDIF,
let_k_3 = BVPLUS(64, 
BVPLUS(64, 
(let_k_0[60:0] @ 0b000
), 
(let_k_0[62:0] @ 0b0
))
, 
BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX(let_k_1[BVPLUS(64, 
0x0000000000000008, 
let_k_2)
[31:0]],32)
)
,64)
)
 IN 
( NOT( BVGT(BVPLUS(64, 
BVPLUS(64, 
(let_k_3[60:0] @ 0b000
), 
(let_k_3[62:0] @ 0b0
))
, 
BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX(let_k_1[BVPLUS(64, 
0x0000000000000009, 
let_k_2)
[31:0]],32)
)
,64)
)
,0x0000000000000008)
)))  );
ASSERT( (LET let_k_0 = BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX((arg017 WITH [0x0000000A] := 0x00)
[BVPLUS(64, 
0x0000000000000007, 
IF((0x7A = arg017[0x00000006]
))
THEN 0x0000000000000001
ELSE 0x0000000000000000
ENDIF)
[31:0]],32)
)
,64)
,
let_k_1 = (arg017 WITH [0x0000000A] := 0x00)
,
let_k_2 = IF((0x7A = arg017[0x00000006]
))
THEN 0x0000000000000001
ELSE 0x0000000000000000
ENDIF,
let_k_3 = BVPLUS(64, 
BVPLUS(64, 
(let_k_0[60:0] @ 0b000
), 
(let_k_0[62:0] @ 0b0
))
, 
BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX(let_k_1[BVPLUS(64, 
0x0000000000000008, 
let_k_2)
[31:0]],32)
)
,64)
)
,
let_k_4 = ((((((((((((((((((((((((((((((((((((const_arr29289 WITH [0x00000000] := 0x00)
 WITH [0x00000001] := 0x00)
 WITH [0x00000002] := 0x00)
 WITH [0x00000003] := 0x00)
 WITH [0x00000004] := 0x01)
 WITH [0x00000005] := 0x00)
 WITH [0x00000006] := 0x00)
 WITH [0x00000007] := 0x00)
 WITH [0x00000008] := 0x02)
 WITH [0x00000009] := 0x00)
 WITH [0x0000000A] := 0x00)
 WITH [0x0000000B] := 0x00)
 WITH [0x0000000C] := 0x00)
 WITH [0x0000000D] := 0x00)
 WITH [0x0000000E] := 0x00)
 WITH [0x0000000F] := 0x00)
 WITH [0x00000010] := 0x03)
 WITH [0x00000011] := 0x00)
 WITH [0x00000012] := 0x00)
 WITH [0x00000013] := 0x00)
 WITH [0x00000014] := 0x00)
 WITH [0x00000015] := 0x00)
 WITH [0x00000016] := 0x00)
 WITH [0x00000017] := 0x00)
 WITH [0x00000018] := 0x00)
 WITH [0x00000019] := 0x00)
 WITH [0x0000001A] := 0x00)
 WITH [0x0000001B] := 0x00)
 WITH [0x0000001C] := 0x00)
 WITH [0x0000001D] := 0x00)
 WITH [0x0000001E] := 0x00)
 WITH [0x0000001F] := 0x00)
 WITH [0x00000020] := 0x05)
 WITH [0x00000021] := 0x00)
 WITH [0x00000022] := 0x00)
 WITH [0x00000023] := 0x00)
,
let_k_5 = (BVPLUS(64, 
BVPLUS(64, 
(let_k_3[60:0] @ 0b000
), 
(let_k_3[62:0] @ 0b0
))
, 
BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX(let_k_1[BVPLUS(64, 
0x0000000000000009, 
let_k_2)
[31:0]],32)
)
,64)
)
[61:0] @ 0b00
)[31:0] IN 
((((0x00 = let_k_4[let_k_5]
) AND (0x00 = let_k_4[BVPLUS(32, 
0x00000001, 
let_k_5)
]
)
) AND (0x00 = let_k_4[BVPLUS(32, 
0x00000002, 
let_k_5)
]
)
) AND (0x00 = let_k_4[BVPLUS(32, 
0x00000003, 
let_k_5)
]
)
))  );
ASSERT( (LET let_k_0 = arg017[0x00000006] IN 
((0x64 = let_k_0
) OR ((0x6F = let_k_0
) OR ((0x75 = let_k_0
) OR (0x78 = let_k_0
)
)
)
))  );
ASSERT( (LET let_k_0 = arg017[0x00000009] IN 
((0x37 = let_k_0
) OR ((0x36 = let_k_0
) OR ((0x35 = let_k_0
) OR ((0x33 = let_k_0
) OR (0x30 = let_k_0
)
)
)
)
))  );
ASSERT( (LET let_k_0 = BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX((arg017 WITH [0x0000000A] := 0x00)
[BVPLUS(64, 
0x0000000000000007, 
IF((0x7A = arg017[0x00000006]
))
THEN 0x0000000000000001
ELSE 0x0000000000000000
ENDIF)
[31:0]],32)
)
,64)
,
let_k_1 = (arg017 WITH [0x0000000A] := 0x00)
,
let_k_2 = IF((0x7A = arg017[0x00000006]
))
THEN 0x0000000000000001
ELSE 0x0000000000000000
ENDIF,
let_k_3 = BVPLUS(64, 
BVPLUS(64, 
(let_k_0[60:0] @ 0b000
), 
(let_k_0[62:0] @ 0b0
))
, 
BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX(let_k_1[BVPLUS(64, 
0x0000000000000008, 
let_k_2)
[31:0]],32)
)
,64)
)
 IN 
(0x30 = BVPLUS(32, 
0x00000030, 
BVMOD(32, 
BVPLUS(64, 
BVPLUS(64, 
(let_k_3[60:0] @ 0b000
), 
(let_k_3[62:0] @ 0b0
))
, 
BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX(let_k_1[BVPLUS(64, 
0x0000000000000009, 
let_k_2)
[31:0]],32)
)
,64)
)
[31:0], 
0x0000000A)
)
[7:0]
))  );
%----------------------------------------------------
QUERY( FALSE  );
