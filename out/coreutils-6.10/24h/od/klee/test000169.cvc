n_args0  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
A_data_stat1  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
B_data_stat2  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdin_stat3  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdout_stat4  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg005  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr16  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg017  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg028  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr29  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdin10  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr311  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr512  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr713  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
A_data14  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2915  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4516  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
B_data17  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5118  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5419  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr820  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5821  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6222  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6623  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6724  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7025  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7226  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7427  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8228  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8329  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8430  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1331  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8632  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8833  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8934  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr9035  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr9736  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5237  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr10638  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr11939  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr12140  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr12541  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr13142  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr13343  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr13444  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr15245  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr15346  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr15547  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr16048  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8049  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr16850  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr16951  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr17752  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr18153  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr18454  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr19255  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr19656  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr19757  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr20158  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr21159  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr21660  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr22061  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr22562  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr22663  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr22964  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr23065  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr23166  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr23267  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr23368  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr23469  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr23570  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr23671  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr24572  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr25173  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr25574  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr25675  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr25776  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr25877  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr26978  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr27279  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr27380  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr27481  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr27582  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr28183  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr28384  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr28585  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr28686  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr28887  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr28988  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr29289  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr29390  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr29491  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr29792  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr29893  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr30094  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr30395  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr30596  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr30797  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr30998  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr31099  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr312100  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr314101  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr315102  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr316103  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr317104  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr318105  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr319106  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr320107  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr321108  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr322109  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr323110  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr324111  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr325112  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr326113  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr328114  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
%----------------------------------------------------
ASSERT( BVGT(0x00000004,(n_args0[0x00000003] @ (n_args0[0x00000002] @ (n_args0[0x00000001] @ n_args0[0x00000000]
)
)
))
 );
ASSERT( SBVGT((n_args0[0x00000003] @ (n_args0[0x00000002] @ (n_args0[0x00000001] @ n_args0[0x00000000]
)
)
),0x00000000)
 );
ASSERT( ( NOT( ((((0x01 = n_args0[0x00000000]
) AND (0x00 = n_args0[0x00000001]
)
) AND (0x00 = n_args0[0x00000002]
)
) AND (0x00 = n_args0[0x00000003]
)
))) );
ASSERT( ( NOT( ((((0x02 = n_args0[0x00000000]
) AND (0x00 = n_args0[0x00000001]
)
) AND (0x00 = n_args0[0x00000002]
)
) AND (0x00 = n_args0[0x00000003]
)
))) );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (A_data_stat1[0x0000000B] @ (A_data_stat1[0x0000000A] @ (A_data_stat1[0x00000009] @ A_data_stat1[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(A_data_stat1[0x0000003F] @ (A_data_stat1[0x0000003E] @ (A_data_stat1[0x0000003D] @ (A_data_stat1[0x0000003C] @ (A_data_stat1[0x0000003B] @ (A_data_stat1[0x0000003A] @ (A_data_stat1[0x00000039] @ A_data_stat1[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (B_data_stat2[0x0000000B] @ (B_data_stat2[0x0000000A] @ (B_data_stat2[0x00000009] @ B_data_stat2[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(B_data_stat2[0x0000003F] @ (B_data_stat2[0x0000003E] @ (B_data_stat2[0x0000003D] @ (B_data_stat2[0x0000003C] @ (B_data_stat2[0x0000003B] @ (B_data_stat2[0x0000003A] @ (B_data_stat2[0x00000039] @ B_data_stat2[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (stdin_stat3[0x0000000B] @ (stdin_stat3[0x0000000A] @ (stdin_stat3[0x00000009] @ stdin_stat3[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(stdin_stat3[0x0000003F] @ (stdin_stat3[0x0000003E] @ (stdin_stat3[0x0000003D] @ (stdin_stat3[0x0000003C] @ (stdin_stat3[0x0000003B] @ (stdin_stat3[0x0000003A] @ (stdin_stat3[0x00000039] @ stdin_stat3[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (stdout_stat4[0x0000000B] @ (stdout_stat4[0x0000000A] @ (stdout_stat4[0x00000009] @ stdout_stat4[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(stdout_stat4[0x0000003F] @ (stdout_stat4[0x0000003E] @ (stdout_stat4[0x0000003D] @ (stdout_stat4[0x0000003C] @ (stdout_stat4[0x0000003B] @ (stdout_stat4[0x0000003A] @ (stdout_stat4[0x00000039] @ stdout_stat4[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( (0x2D = arg017[0x00000000]
) );
ASSERT( (0x2D = arg017[0x00000001]
) );
ASSERT( (0x73 = arg017[0x00000002]
) );
ASSERT( (0x6B = arg017[0x00000003]
) );
ASSERT( (0x69 = arg017[0x00000004]
) );
ASSERT( (0x70 = arg017[0x00000005]
) );
ASSERT( (0x2D = arg017[0x00000006]
) );
ASSERT( (0x62 = arg017[0x00000007]
) );
ASSERT( (0x79 = arg017[0x00000008]
) );
ASSERT( (0x74 = arg017[0x00000009]
) );
ASSERT( (0x2B = arg028[0x00000000]
) );
ASSERT( (0x30 = arg028[0x00000001]
) );
ASSERT( (0x00000078 = (0x00000020 | BVSX(arg028[0x00000002],32)

)
) );
ASSERT( ( NOT( SBVGT((0x000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg028[0x00000003],32)
)
[7:0]
),0x00000009)
)) );
ASSERT( ( NOT( SBVGT((0x000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg028[0x00000004],32)
)
[7:0]
),0x00000009)
)) );
ASSERT( SBVGT((0x000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg028[0x00000005],32)
)
[7:0]
),0x00000009)
 );
ASSERT( ( NOT( SBVGT(0x00000041,BVSX(arg028[0x00000005],32)
)
)) );
ASSERT( ( NOT( SBVGT(0x00000010,(0x000000 @ BVPLUS(32, 
0xFFFFFFA9, 
(0x00000020 | BVSX(arg028[0x00000005],32)

))
[7:0]
))
)) );
ASSERT( (0x47 = BVSX(arg028[0x00000005],32)
[7:0]
) );
ASSERT( (0x69 = arg028[0x00000006]
) );
ASSERT( (LET let_k_0 = BVPLUS(64, 
((0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg028[0x00000003],32)
)
[7:0]
)[59:0] @ 0x0
), 
(0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg028[0x00000004],32)
)
[7:0]
))
,
let_k_1 = IF(BVGT(BVMULT(128, 
0x00000000000000000000000000000400, 
(0x0000000000000000 @ let_k_0
))
,0x0000000000000000FFFFFFFFFFFFFFFF)
)
THEN 0xFFFFFFFFFFFFFFFF
ELSE (let_k_0[53:0] @ 0b0000000000
)
ENDIF,
let_k_2 = BVGT(BVMULT(128, 
0x00000000000000000000000000000400, 
(0x0000000000000000 @ let_k_1
))
,0x0000000000000000FFFFFFFFFFFFFFFF)
,
let_k_3 = BVGT(BVMULT(128, 
0x00000000000000000000000000000400, 
(0x0000000000000000 @ let_k_0
))
,0x0000000000000000FFFFFFFFFFFFFFFF)
,
let_k_4 = (IF(BVGT(BVMULT(128, 
0x00000000000000000000000000000400, 
(0x0000000000000000 @ IF(let_k_2)
THEN 0xFFFFFFFFFFFFFFFF
ELSE (let_k_1[53:0] @ 0b0000000000
)
ENDIF
))
,0x0000000000000000FFFFFFFFFFFFFFFF)
)
THEN 0x00000001
ELSE 0x00000000
ENDIF | (IF(let_k_2)
THEN 0x00000001
ELSE 0x00000000
ENDIF | IF(let_k_3)
THEN 0x00000001
ELSE 0x00000000
ENDIF
)
) IN 
(0x00000000 = IF((0x00 = (arg028 WITH [0x0000000A] := 0x00)
[BVPLUS(64, 
0x0000000000000005, 
IF((0x42 = arg028[0x00000007]
))
THEN 0x0000000000000003
ELSE 0x0000000000000001
ENDIF)
[31:0]]
))
THEN let_k_4
ELSE (0x00000002 | let_k_4
)
ENDIF
))  );
ASSERT( (0x2F = arg005[0x00000000]
) );
ASSERT( (0x74 = arg005[0x00000001]
) );
ASSERT( (0x6D = arg005[0x00000002]
) );
ASSERT( (0x70 = arg005[0x00000003]
) );
ASSERT( (0x2F = arg005[0x00000004]
) );
ASSERT( (0x73 = arg005[0x00000005]
) );
ASSERT( (0x61 = arg005[0x00000006]
) );
ASSERT( (0x6E = arg005[0x00000007]
) );
ASSERT( (0x64 = arg005[0x00000008]
) );
ASSERT( (0x62 = arg005[0x00000009]
) );
ASSERT( (LET let_k_0 = BVPLUS(64, 
((0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg028[0x00000003],32)
)
[7:0]
)[59:0] @ 0x0
), 
(0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg028[0x00000004],32)
)
[7:0]
))
,
let_k_1 = IF(BVGT(BVMULT(128, 
0x00000000000000000000000000000400, 
(0x0000000000000000 @ let_k_0
))
,0x0000000000000000FFFFFFFFFFFFFFFF)
)
THEN 0xFFFFFFFFFFFFFFFF
ELSE (let_k_0[53:0] @ 0b0000000000
)
ENDIF,
let_k_2 = IF(BVGT(BVMULT(128, 
0x00000000000000000000000000000400, 
(0x0000000000000000 @ let_k_1
))
,0x0000000000000000FFFFFFFFFFFFFFFF)
)
THEN 0xFFFFFFFFFFFFFFFF
ELSE (let_k_1[53:0] @ 0b0000000000
)
ENDIF IN 
(0x0000000000000000 = IF(BVGT(BVMULT(128, 
0x00000000000000000000000000000400, 
(0x0000000000000000 @ let_k_2
))
,0x0000000000000000FFFFFFFFFFFFFFFF)
)
THEN 0xFFFFFFFFFFFFFFFF
ELSE (let_k_2[53:0] @ 0b0000000000
)
ENDIF
))  );
%----------------------------------------------------
QUERY( FALSE  );
