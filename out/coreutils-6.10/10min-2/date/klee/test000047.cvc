n_args0  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
n_args_11  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
A_data_stat2  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdin_stat3  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdout_stat4  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg005  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg016  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg027  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg008  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr19  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr210  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr311  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr512  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr613  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr714  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr815  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr916  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1017  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1118  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdin19  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1220  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1321  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1422  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1523  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1624  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1725  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
%----------------------------------------------------
ASSERT( BVGT(0x00000002,(n_args0[0x00000003] @ (n_args0[0x00000002] @ (n_args0[0x00000001] @ n_args0[0x00000000]
)
)
))
 );
ASSERT( ( NOT( SBVGT((n_args0[0x00000003] @ (n_args0[0x00000002] @ (n_args0[0x00000001] @ n_args0[0x00000000]
)
)
),0x00000000)
)) );
ASSERT( ((((0x01 = n_args_11[0x00000000]
) AND (0x00 = n_args_11[0x00000001]
)
) AND (0x00 = n_args_11[0x00000002]
)
) AND (0x00 = n_args_11[0x00000003]
)
) );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (A_data_stat2[0x0000000B] @ (A_data_stat2[0x0000000A] @ (A_data_stat2[0x00000009] @ A_data_stat2[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(A_data_stat2[0x0000003F] @ (A_data_stat2[0x0000003E] @ (A_data_stat2[0x0000003D] @ (A_data_stat2[0x0000003C] @ (A_data_stat2[0x0000003B] @ (A_data_stat2[0x0000003A] @ (A_data_stat2[0x00000039] @ A_data_stat2[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (stdin_stat3[0x0000000B] @ (stdin_stat3[0x0000000A] @ (stdin_stat3[0x00000009] @ stdin_stat3[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(stdin_stat3[0x0000003F] @ (stdin_stat3[0x0000003E] @ (stdin_stat3[0x0000003D] @ (stdin_stat3[0x0000003C] @ (stdin_stat3[0x0000003B] @ (stdin_stat3[0x0000003A] @ (stdin_stat3[0x00000039] @ stdin_stat3[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (stdout_stat4[0x0000000B] @ (stdout_stat4[0x0000000A] @ (stdout_stat4[0x00000009] @ stdout_stat4[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(stdout_stat4[0x0000003F] @ (stdout_stat4[0x0000003E] @ (stdout_stat4[0x0000003D] @ (stdout_stat4[0x0000003C] @ (stdout_stat4[0x0000003B] @ (stdout_stat4[0x0000003A] @ (stdout_stat4[0x00000039] @ stdout_stat4[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( (0x2B = arg008[0x00000000]
) );
ASSERT( ( NOT( (0x00 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x61 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x62 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x63 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x64 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x65 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x66 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x67 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x68 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x69 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x6A = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x6B = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x6C = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x6D = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x6E = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x6F = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x70 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x71 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x72 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x73 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x74 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x75 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x76 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x77 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x78 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x79 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x7A = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x7B = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x7C = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x7D = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x7E = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x41 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x42 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x43 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x44 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x45 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x46 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x47 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x48 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x49 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x4A = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x4B = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x4C = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x4D = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x4E = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x4F = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x50 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x51 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x52 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x53 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x54 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x55 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x56 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x57 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x58 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x59 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x5A = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x5B = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x5C = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x5D = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x5E = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x5F = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x20 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x21 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x22 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x23 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x25 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x26 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x27 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x28 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x29 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x2A = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x2B = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x2C = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x2D = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x2E = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x2F = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x30 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x31 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x32 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x33 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x34 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x35 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x36 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x37 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x38 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x39 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x3A = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x3B = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x3C = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x3D = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x3E = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x3F = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x08 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x09 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x0A = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x0B = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x0C = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x0D = arg008[0x00000001]
))) );
ASSERT( SBVGT(0x00000080,(0x000000 @ arg008[0x00000001]
))
 );
%----------------------------------------------------
QUERY( FALSE  );
