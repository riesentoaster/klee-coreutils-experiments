n_args0  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
n_args_11  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
A_data_stat2  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdin_stat3  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdout_stat4  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg005  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg016  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg027  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdin8  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr19  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg0010  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr211  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr312  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr413  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr514  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr615  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr716  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr817  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr918  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1019  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
A_data20  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1121  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1222  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1323  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1624  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1725  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1826  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1927  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2028  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2129  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2230  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2331  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2432  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2533  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2634  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2735  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2936  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3037  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2838  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3139  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3240  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3341  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3442  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1443  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3544  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3645  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3746  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3847  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3948  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4049  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4150  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4251  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4352  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4453  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4554  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
%----------------------------------------------------
ASSERT( BVGT(0x00000002,(n_args0[0x00000003] @ (n_args0[0x00000002] @ (n_args0[0x00000001] @ n_args0[0x00000000]
)
)
))
 );
ASSERT( SBVGT((n_args0[0x00000003] @ (n_args0[0x00000002] @ (n_args0[0x00000001] @ n_args0[0x00000000]
)
)
),0x00000000)
 );
ASSERT( BVGT(0x00000003,(n_args_11[0x00000003] @ (n_args_11[0x00000002] @ (n_args_11[0x00000001] @ n_args_11[0x00000000]
)
)
))
 );
ASSERT( SBVGT((n_args_11[0x00000003] @ (n_args_11[0x00000002] @ (n_args_11[0x00000001] @ n_args_11[0x00000000]
)
)
),0x00000000)
 );
ASSERT( ((((0x01 = n_args_11[0x00000000]
) AND (0x00 = n_args_11[0x00000001]
)
) AND (0x00 = n_args_11[0x00000002]
)
) AND (0x00 = n_args_11[0x00000003]
)
) );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (A_data_stat2[0x0000000B] @ (A_data_stat2[0x0000000A] @ (A_data_stat2[0x00000009] @ A_data_stat2[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(A_data_stat2[0x0000003F] @ (A_data_stat2[0x0000003E] @ (A_data_stat2[0x0000003D] @ (A_data_stat2[0x0000003C] @ (A_data_stat2[0x0000003B] @ (A_data_stat2[0x0000003A] @ (A_data_stat2[0x00000039] @ A_data_stat2[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (stdin_stat3[0x0000000B] @ (stdin_stat3[0x0000000A] @ (stdin_stat3[0x00000009] @ stdin_stat3[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(stdin_stat3[0x0000003F] @ (stdin_stat3[0x0000003E] @ (stdin_stat3[0x0000003D] @ (stdin_stat3[0x0000003C] @ (stdin_stat3[0x0000003B] @ (stdin_stat3[0x0000003A] @ (stdin_stat3[0x00000039] @ stdin_stat3[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (stdout_stat4[0x0000000B] @ (stdout_stat4[0x0000000A] @ (stdout_stat4[0x00000009] @ stdout_stat4[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(stdout_stat4[0x0000003F] @ (stdout_stat4[0x0000003E] @ (stdout_stat4[0x0000003D] @ (stdout_stat4[0x0000003C] @ (stdout_stat4[0x0000003B] @ (stdout_stat4[0x0000003A] @ (stdout_stat4[0x00000039] @ stdout_stat4[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( (0x2B = arg005[0x00000000]
) );
ASSERT( (0x2D = arg016[0x00000000]
) );
ASSERT( BVGT(0x0000000A,BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg016[0x00000001],32)
)
)
 );
ASSERT( (0x2B = arg005[0x00000001]
) );
ASSERT( ( NOT( SBVGT((0x000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000002],32)
)
[7:0]
),0x00000009)
)) );
ASSERT( ( NOT( SBVGT((0x000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000003],32)
)
[7:0]
),0x00000009)
)) );
ASSERT( ( NOT( SBVGT((0x000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000004],32)
)
[7:0]
),0x00000009)
)) );
ASSERT( ( NOT( SBVGT((0x000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000005],32)
)
[7:0]
),0x00000009)
)) );
ASSERT( ( NOT( SBVGT((0x000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000006],32)
)
[7:0]
),0x00000009)
)) );
ASSERT( ( NOT( SBVGT((0x000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000007],32)
)
[7:0]
),0x00000009)
)) );
ASSERT( (LET let_k_0 = (0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000002],32)
)
[7:0]
),
let_k_1 = BVPLUS(64, 
BVPLUS(64, 
(let_k_0[60:0] @ 0b000
), 
(let_k_0[62:0] @ 0b0
))
, 
(0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000003],32)
)
[7:0]
))
,
let_k_2 = BVPLUS(64, 
BVPLUS(64, 
(let_k_1[60:0] @ 0b000
), 
(let_k_1[62:0] @ 0b0
))
, 
(0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000004],32)
)
[7:0]
))
,
let_k_3 = BVPLUS(64, 
BVPLUS(64, 
(let_k_2[60:0] @ 0b000
), 
(let_k_2[62:0] @ 0b0
))
, 
(0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000005],32)
)
[7:0]
))
,
let_k_4 = BVPLUS(64, 
BVPLUS(64, 
(let_k_3[60:0] @ 0b000
), 
(let_k_3[62:0] @ 0b0
))
, 
(0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000006],32)
)
[7:0]
))
 IN 
(0x0000000000000000 = BVPLUS(64, 
BVPLUS(64, 
(let_k_4[60:0] @ 0b000
), 
(let_k_4[62:0] @ 0b0
))
, 
(0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000007],32)
)
[7:0]
))

))  );
ASSERT( (0x4D = arg005[0x00000008]
) );
ASSERT( (0x00 = arg005[0x00000009]
) );
ASSERT( ( NOT( (0x2B = arg016[0x00000001]
))) );
ASSERT( ( NOT( (0x2D = arg016[0x00000001]
))) );
ASSERT( (0x8 = stdin_stat3[0x00000019][7:4]
) );
ASSERT( (0x0A = stdin8[0x00000007]
) );
ASSERT( (0x0A = stdin8[0x00000000]
) );
ASSERT( (0x0A = stdin8[0x00000001]
) );
ASSERT( (0x0A = stdin8[0x00000002]
) );
ASSERT( (0x0A = stdin8[0x00000003]
) );
ASSERT( (0x0A = stdin8[0x00000004]
) );
ASSERT( (0x0A = stdin8[0x00000005]
) );
ASSERT( (0x0A = stdin8[0x00000006]
) );
%----------------------------------------------------
QUERY( FALSE  );
