n_args0  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
n_args_11  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
A_data_stat2  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdin_stat3  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdout_stat4  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg005  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg016  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg027  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg008  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr19  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr210  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr311  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdin12  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr413  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr514  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
A_data15  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
%----------------------------------------------------
ASSERT( BVGT(0x00000002,(n_args0[0x00000003] @ (n_args0[0x00000002] @ (n_args0[0x00000001] @ n_args0[0x00000000]
)
)
))
 );
ASSERT( SBVGT((n_args0[0x00000003] @ (n_args0[0x00000002] @ (n_args0[0x00000001] @ n_args0[0x00000000]
)
)
),0x00000000)
 );
ASSERT( BVGT(0x00000003,(n_args_11[0x00000003] @ (n_args_11[0x00000002] @ (n_args_11[0x00000001] @ n_args_11[0x00000000]
)
)
))
 );
ASSERT( SBVGT((n_args_11[0x00000003] @ (n_args_11[0x00000002] @ (n_args_11[0x00000001] @ n_args_11[0x00000000]
)
)
),0x00000000)
 );
ASSERT( ( NOT( ((((0x01 = n_args_11[0x00000000]
) AND (0x00 = n_args_11[0x00000001]
)
) AND (0x00 = n_args_11[0x00000002]
)
) AND (0x00 = n_args_11[0x00000003]
)
))) );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (A_data_stat2[0x0000000B] @ (A_data_stat2[0x0000000A] @ (A_data_stat2[0x00000009] @ A_data_stat2[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(A_data_stat2[0x0000003F] @ (A_data_stat2[0x0000003E] @ (A_data_stat2[0x0000003D] @ (A_data_stat2[0x0000003C] @ (A_data_stat2[0x0000003B] @ (A_data_stat2[0x0000003A] @ (A_data_stat2[0x00000039] @ A_data_stat2[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (stdin_stat3[0x0000000B] @ (stdin_stat3[0x0000000A] @ (stdin_stat3[0x00000009] @ stdin_stat3[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(stdin_stat3[0x0000003F] @ (stdin_stat3[0x0000003E] @ (stdin_stat3[0x0000003D] @ (stdin_stat3[0x0000003C] @ (stdin_stat3[0x0000003B] @ (stdin_stat3[0x0000003A] @ (stdin_stat3[0x00000039] @ stdin_stat3[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( BVGT(0x0000000000010000,(stdout_stat4[0x0000003F] @ (stdout_stat4[0x0000003E] @ (stdout_stat4[0x0000003D] @ (stdout_stat4[0x0000003C] @ (stdout_stat4[0x0000003B] @ (stdout_stat4[0x0000003A] @ (stdout_stat4[0x00000039] @ stdout_stat4[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ( NOT( (0x2D = arg027[0x00000000]
))) );
ASSERT( (0x00 = arg005[0x00000001]
) );
ASSERT( (0x41 = arg005[0x00000000]
) );
ASSERT( (0x8 = stdout_stat4[0x00000019][7:4]
) );
ASSERT( (LET let_k_0 = ((((((((((((((((((((((((const_arr19 WITH [0x00000000] := 0x08)
 WITH [0x00000001] := 0x00)
 WITH [0x00000002] := 0x00)
 WITH [0x00000003] := 0x00)
 WITH [0x00000004] := 0xAB)
 WITH [0x00000005] := 0xAB)
 WITH [0x00000006] := 0xAB)
 WITH [0x00000007] := 0xAB)
 WITH [0x00000008] := 0x98)
 WITH [0x00000009] := 0xD2)
 WITH [0x0000000A] := 0xF5)
 WITH [0x0000000B] := 0xFA)
 WITH [0x0000000C] := 0x38)
 WITH [0x0000000D] := 0x56)
 WITH [0x0000000E] := 0x00)
 WITH [0x0000000F] := 0x00)
 WITH [0x00000010] := 0x90)
 WITH [0x00000011] := 0x92)
 WITH [0x00000012] := 0xD2)
 WITH [0x00000013] := 0xF8)
 WITH [0x00000014] := 0x38)
 WITH [0x00000015] := 0x56)
 WITH [0x00000016] := 0x00)
 WITH [0x00000017] := 0x00)
,
let_k_1 = BVPLUS(64, 
0xFFFFA9C704F74B10, 
IF(((((((((0x00 = A_data_stat2[0x00000008]
) AND (0x00 = A_data_stat2[0x00000009]
)
) AND (0x00 = A_data_stat2[0x0000000A]
)
) AND (0x00 = A_data_stat2[0x0000000B]
)
) AND (0x00 = A_data_stat2[0x0000000C]
)
) AND (0x00 = A_data_stat2[0x0000000D]
)
) AND (0x00 = A_data_stat2[0x0000000E]
)
) AND (0x00 = A_data_stat2[0x0000000F]
)
))
THEN 0x0000000000000000
ELSE 0x00005638FB08B500
ENDIF)
[31:0],
let_k_2 = BVPLUS(64, 
0xFFFFA9C7072D6D88, 
(let_k_0[BVPLUS(32, 
0x00000007, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000006, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000005, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000004, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000003, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000002, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000001, 
let_k_1)
] @ let_k_0[let_k_1]
)
)
)
)
)
)
))
[31:0],
let_k_3 = ((((((((((((((((A_data_stat2 WITH [0x00000030] := 0x08)
 WITH [0x00000031] := 0x00)
 WITH [0x00000032] := 0x00)
 WITH [0x00000033] := 0x00)
 WITH [0x00000034] := 0x00)
 WITH [0x00000035] := 0x00)
 WITH [0x00000036] := 0x00)
 WITH [0x00000037] := 0x00)
 WITH [0x00000040] := 0x08)
 WITH [0x00000041] := 0x00)
 WITH [0x00000042] := 0x00)
 WITH [0x00000043] := 0x00)
 WITH [0x00000044] := 0x00)
 WITH [0x00000045] := 0x00)
 WITH [0x00000046] := 0x00)
 WITH [0x00000047] := 0x00)
,
let_k_4 = BVPLUS(32, 
0x00000001, 
let_k_2)
,
let_k_5 = BVPLUS(32, 
0x00000002, 
let_k_2)
,
let_k_6 = let_k_3[let_k_5],
let_k_7 = BVPLUS(32, 
0x00000003, 
let_k_2)
,
let_k_8 = let_k_3[let_k_7],
let_k_9 = (let_k_0[BVPLUS(32, 
0x00000007, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000006, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000005, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000004, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000003, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000002, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000001, 
let_k_1)
] @ let_k_0[let_k_1]
)
)
)
)
)
)
),
let_k_10 = ((((let_k_3 WITH [let_k_2] := 0x00)
 WITH [let_k_4] := ((let_k_8 @ (let_k_6 @ (let_k_3[let_k_4] @ let_k_3[let_k_2]
)
)
)[31:9] @ 0b000000000
)[15:8])
 WITH [let_k_5] := let_k_6)
 WITH [let_k_7] := let_k_8)
 IN 
((let_k_10[BVPLUS(64, 
0xFFFFA9C7072D6D77, 
let_k_9)
[31:0]] @ (let_k_10[BVPLUS(64, 
0xFFFFA9C7072D6D76, 
let_k_9)
[31:0]] @ (let_k_10[BVPLUS(64, 
0xFFFFA9C7072D6D75, 
let_k_9)
[31:0]] @ (let_k_10[BVPLUS(64, 
0xFFFFA9C7072D6D74, 
let_k_9)
[31:0]] @ (let_k_10[BVPLUS(64, 
0xFFFFA9C7072D6D73, 
let_k_9)
[31:0]] @ (let_k_10[BVPLUS(64, 
0xFFFFA9C7072D6D72, 
let_k_9)
[31:0]] @ (let_k_10[BVPLUS(64, 
0xFFFFA9C7072D6D71, 
let_k_9)
[31:0]] @ let_k_10[BVPLUS(64, 
0xFFFFA9C7072D6D70, 
let_k_9)
[31:0]]
)
)
)
)
)
)
) = IF((0x8 = stdout_stat4[0x00000019][7:4]
))
THEN 0x0000000000000049
ELSE 0x0000000000000000
ENDIF
))  );
ASSERT( (LET let_k_0 = ((((((((((((((((((((((((const_arr19 WITH [0x00000000] := 0x08)
 WITH [0x00000001] := 0x00)
 WITH [0x00000002] := 0x00)
 WITH [0x00000003] := 0x00)
 WITH [0x00000004] := 0xAB)
 WITH [0x00000005] := 0xAB)
 WITH [0x00000006] := 0xAB)
 WITH [0x00000007] := 0xAB)
 WITH [0x00000008] := 0x98)
 WITH [0x00000009] := 0xD2)
 WITH [0x0000000A] := 0xF5)
 WITH [0x0000000B] := 0xFA)
 WITH [0x0000000C] := 0x38)
 WITH [0x0000000D] := 0x56)
 WITH [0x0000000E] := 0x00)
 WITH [0x0000000F] := 0x00)
 WITH [0x00000010] := 0x90)
 WITH [0x00000011] := 0x92)
 WITH [0x00000012] := 0xD2)
 WITH [0x00000013] := 0xF8)
 WITH [0x00000014] := 0x38)
 WITH [0x00000015] := 0x56)
 WITH [0x00000016] := 0x00)
 WITH [0x00000017] := 0x00)
,
let_k_1 = BVPLUS(64, 
0xFFFFA9C704F74B10, 
IF(((((((((0x00 = A_data_stat2[0x00000008]
) AND (0x00 = A_data_stat2[0x00000009]
)
) AND (0x00 = A_data_stat2[0x0000000A]
)
) AND (0x00 = A_data_stat2[0x0000000B]
)
) AND (0x00 = A_data_stat2[0x0000000C]
)
) AND (0x00 = A_data_stat2[0x0000000D]
)
) AND (0x00 = A_data_stat2[0x0000000E]
)
) AND (0x00 = A_data_stat2[0x0000000F]
)
))
THEN 0x0000000000000000
ELSE 0x00005638FB08B500
ENDIF)
[31:0],
let_k_2 = BVPLUS(64, 
0xFFFFA9C7072D6D88, 
(let_k_0[BVPLUS(32, 
0x00000007, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000006, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000005, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000004, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000003, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000002, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000001, 
let_k_1)
] @ let_k_0[let_k_1]
)
)
)
)
)
)
))
[31:0],
let_k_3 = ((((((((((((((((A_data_stat2 WITH [0x00000030] := 0x08)
 WITH [0x00000031] := 0x00)
 WITH [0x00000032] := 0x00)
 WITH [0x00000033] := 0x00)
 WITH [0x00000034] := 0x00)
 WITH [0x00000035] := 0x00)
 WITH [0x00000036] := 0x00)
 WITH [0x00000037] := 0x00)
 WITH [0x00000040] := 0x08)
 WITH [0x00000041] := 0x00)
 WITH [0x00000042] := 0x00)
 WITH [0x00000043] := 0x00)
 WITH [0x00000044] := 0x00)
 WITH [0x00000045] := 0x00)
 WITH [0x00000046] := 0x00)
 WITH [0x00000047] := 0x00)
,
let_k_4 = BVPLUS(32, 
0x00000001, 
let_k_2)
,
let_k_5 = BVPLUS(32, 
0x00000002, 
let_k_2)
,
let_k_6 = let_k_3[let_k_5],
let_k_7 = BVPLUS(32, 
0x00000003, 
let_k_2)
,
let_k_8 = let_k_3[let_k_7],
let_k_9 = (let_k_0[BVPLUS(32, 
0x00000007, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000006, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000005, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000004, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000003, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000002, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000001, 
let_k_1)
] @ let_k_0[let_k_1]
)
)
)
)
)
)
),
let_k_10 = ((((let_k_3 WITH [let_k_2] := 0x00)
 WITH [let_k_4] := ((let_k_8 @ (let_k_6 @ (let_k_3[let_k_4] @ let_k_3[let_k_2]
)
)
)[31:9] @ 0b000000000
)[15:8])
 WITH [let_k_5] := let_k_6)
 WITH [let_k_7] := let_k_8)
 IN 
((((((((0xEF = let_k_10[BVPLUS(64, 
0xFFFFA9C7072D6D78, 
let_k_9)
[31:0]]
) AND (0x11 = let_k_10[BVPLUS(64, 
0xFFFFA9C7072D6D79, 
let_k_9)
[31:0]]
)
) AND (0x3B = let_k_10[BVPLUS(64, 
0xFFFFA9C7072D6D7A, 
let_k_9)
[31:0]]
)
) AND (0x00 = let_k_10[BVPLUS(64, 
0xFFFFA9C7072D6D7B, 
let_k_9)
[31:0]]
)
) AND (0x00 = let_k_10[BVPLUS(64, 
0xFFFFA9C7072D6D7C, 
let_k_9)
[31:0]]
)
) AND (0x00 = let_k_10[BVPLUS(64, 
0xFFFFA9C7072D6D7D, 
let_k_9)
[31:0]]
)
) AND (0x00 = let_k_10[BVPLUS(64, 
0xFFFFA9C7072D6D7E, 
let_k_9)
[31:0]]
)
) AND (0x00 = let_k_10[BVPLUS(64, 
0xFFFFA9C7072D6D7F, 
let_k_9)
[31:0]]
)
))  );
ASSERT( (0x2F = arg016[0x00000000]
) );
ASSERT( (0x74 = arg016[0x00000001]
) );
ASSERT( ((((((((0x49 = stdout_stat4[0x00000000]
) AND (0x00 = stdout_stat4[0x00000001]
)
) AND (0x00 = stdout_stat4[0x00000002]
)
) AND (0x00 = stdout_stat4[0x00000003]
)
) AND (0x00 = stdout_stat4[0x00000004]
)
) AND (0x00 = stdout_stat4[0x00000005]
)
) AND (0x00 = stdout_stat4[0x00000006]
)
) AND (0x00 = stdout_stat4[0x00000007]
)
) );
ASSERT( ((((((((0xEF = stdout_stat4[0x00000008]
) AND (0x11 = stdout_stat4[0x00000009]
)
) AND (0x3B = stdout_stat4[0x0000000A]
)
) AND (0x00 = stdout_stat4[0x0000000B]
)
) AND (0x00 = stdout_stat4[0x0000000C]
)
) AND (0x00 = stdout_stat4[0x0000000D]
)
) AND (0x00 = stdout_stat4[0x0000000E]
)
) AND (0x00 = stdout_stat4[0x0000000F]
)
) );
%----------------------------------------------------
QUERY( FALSE  );
