n_args0  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
A_data_stat1  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
B_data_stat2  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdin_stat3  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdout_stat4  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg005  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr16  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg017  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg028  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr29  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdin10  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr311  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr512  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr713  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2714  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3315  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3916  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
A_data17  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4818  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
B_data19  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5120  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5221  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6322  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6623  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6924  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8025  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8126  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3527  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8628  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1129  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8830  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr9531  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr10632  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr11333  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr834  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr12935  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr13436  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr13837  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr13938  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr14039  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr14240  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr15341  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr15542  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr15843  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr15944  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr16245  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr16646  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr16847  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr17048  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr17249  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
%----------------------------------------------------
ASSERT( ((((0x02 = n_args0[0x00000000]
) AND (0x00 = n_args0[0x00000001]
)
) AND (0x00 = n_args0[0x00000002]
)
) AND (0x00 = n_args0[0x00000003]
)
) );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (A_data_stat1[0x0000000B] @ (A_data_stat1[0x0000000A] @ (A_data_stat1[0x00000009] @ A_data_stat1[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(A_data_stat1[0x0000003F] @ (A_data_stat1[0x0000003E] @ (A_data_stat1[0x0000003D] @ (A_data_stat1[0x0000003C] @ (A_data_stat1[0x0000003B] @ (A_data_stat1[0x0000003A] @ (A_data_stat1[0x00000039] @ A_data_stat1[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (B_data_stat2[0x0000000B] @ (B_data_stat2[0x0000000A] @ (B_data_stat2[0x00000009] @ B_data_stat2[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(B_data_stat2[0x0000003F] @ (B_data_stat2[0x0000003E] @ (B_data_stat2[0x0000003D] @ (B_data_stat2[0x0000003C] @ (B_data_stat2[0x0000003B] @ (B_data_stat2[0x0000003A] @ (B_data_stat2[0x00000039] @ B_data_stat2[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (stdin_stat3[0x0000000B] @ (stdin_stat3[0x0000000A] @ (stdin_stat3[0x00000009] @ stdin_stat3[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(stdin_stat3[0x0000003F] @ (stdin_stat3[0x0000003E] @ (stdin_stat3[0x0000003D] @ (stdin_stat3[0x0000003C] @ (stdin_stat3[0x0000003B] @ (stdin_stat3[0x0000003A] @ (stdin_stat3[0x00000039] @ stdin_stat3[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (stdout_stat4[0x0000000B] @ (stdout_stat4[0x0000000A] @ (stdout_stat4[0x00000009] @ stdout_stat4[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(stdout_stat4[0x0000003F] @ (stdout_stat4[0x0000003E] @ (stdout_stat4[0x0000003D] @ (stdout_stat4[0x0000003C] @ (stdout_stat4[0x0000003B] @ (stdout_stat4[0x0000003A] @ (stdout_stat4[0x00000039] @ stdout_stat4[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( (0x2D = arg005[0x00000000]
) );
ASSERT( (0x2D = arg005[0x00000001]
) );
ASSERT( (0x00 = arg005[0x00000003]
) );
ASSERT( (0x66 = arg005[0x00000002]
) );
ASSERT( ( NOT( (0x00 = arg017[0x00000000]
))) );
ASSERT( (LET let_k_0 = arg017[0x00000000] IN 
((0x78 = let_k_0
) OR ((0x75 = let_k_0
) OR ((0x6F = let_k_0
) OR (0x64 = let_k_0
)
)
)
))  );
ASSERT( ( NOT( (0x43 = arg017[0x00000001]
))) );
ASSERT( ( NOT( (0x49 = arg017[0x00000001]
))) );
ASSERT( ( NOT( (0x4C = arg017[0x00000001]
))) );
ASSERT( ( NOT( (0x53 = arg017[0x00000001]
))) );
ASSERT( BVGT(0x0000000A,BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg017[0x00000001],32)
)
)
 );
ASSERT( BVGT(0x0000000A,BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg017[0x00000002],32)
)
)
 );
ASSERT( BVGT(0x0000000A,BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg017[0x00000003],32)
)
)
 );
ASSERT( BVGT(0x0000000A,BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg017[0x00000004],32)
)
)
 );
ASSERT( BVGT(0x0000000A,BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg017[0x00000005],32)
)
)
 );
ASSERT( BVGT(0x0000000A,BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg017[0x00000006],32)
)
)
 );
ASSERT( BVGT(0x0000000A,BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg017[0x00000007],32)
)
)
 );
ASSERT( BVGT(0x0000000A,BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg017[0x00000008],32)
)
)
 );
ASSERT( BVGT(0x0000000A,BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg017[0x00000009],32)
)
)
 );
ASSERT( (LET let_k_0 = BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg017[0x00000001],32)
)
,64)
,
let_k_1 = BVPLUS(64, 
BVPLUS(64, 
(let_k_0[60:0] @ 0b000
), 
(let_k_0[62:0] @ 0b0
))
, 
BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg017[0x00000002],32)
)
,64)
)
,
let_k_2 = BVPLUS(64, 
BVPLUS(64, 
(let_k_1[60:0] @ 0b000
), 
(let_k_1[62:0] @ 0b0
))
, 
BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg017[0x00000003],32)
)
,64)
)
,
let_k_3 = BVPLUS(64, 
BVPLUS(64, 
(let_k_2[60:0] @ 0b000
), 
(let_k_2[62:0] @ 0b0
))
, 
BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg017[0x00000004],32)
)
,64)
)
,
let_k_4 = BVPLUS(64, 
BVPLUS(64, 
(let_k_3[60:0] @ 0b000
), 
(let_k_3[62:0] @ 0b0
))
, 
BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg017[0x00000005],32)
)
,64)
)
,
let_k_5 = BVPLUS(64, 
BVPLUS(64, 
(let_k_4[60:0] @ 0b000
), 
(let_k_4[62:0] @ 0b0
))
, 
BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg017[0x00000006],32)
)
,64)
)
,
let_k_6 = BVPLUS(64, 
BVPLUS(64, 
(let_k_5[60:0] @ 0b000
), 
(let_k_5[62:0] @ 0b0
))
, 
BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg017[0x00000007],32)
)
,64)
)
,
let_k_7 = BVPLUS(64, 
BVPLUS(64, 
(let_k_6[60:0] @ 0b000
), 
(let_k_6[62:0] @ 0b0
))
, 
BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg017[0x00000008],32)
)
,64)
)
 IN 
BVGT(BVPLUS(64, 
BVPLUS(64, 
(let_k_7[60:0] @ 0b000
), 
(let_k_7[62:0] @ 0b0
))
, 
BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg017[0x00000009],32)
)
,64)
)
,0x0000000000000008)
)  );
ASSERT( (LET let_k_0 = arg017[0x00000000] IN 
((0x64 = let_k_0
) OR ((0x6F = let_k_0
) OR ((0x78 = let_k_0
) OR (0x75 = let_k_0
)
)
)
))  );
%----------------------------------------------------
QUERY( FALSE  );
