n_args0  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
A_data_stat1  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
B_data_stat2  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdin_stat3  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdout_stat4  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg005  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr16  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg017  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg028  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr29  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdin10  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr311  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr512  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr713  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2814  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2915  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3816  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
A_data17  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5418  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5719  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6020  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6221  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr822  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4723  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7224  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr625  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr9126  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr10127  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
B_data28  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1829  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr11930  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr12931  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr13032  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr13233  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr13934  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr14235  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7736  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
%----------------------------------------------------
ASSERT( ((((0x01 = n_args0[0x00000000]
) AND (0x00 = n_args0[0x00000001]
)
) AND (0x00 = n_args0[0x00000002]
)
) AND (0x00 = n_args0[0x00000003]
)
) );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (A_data_stat1[0x0000000B] @ (A_data_stat1[0x0000000A] @ (A_data_stat1[0x00000009] @ A_data_stat1[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(A_data_stat1[0x0000003F] @ (A_data_stat1[0x0000003E] @ (A_data_stat1[0x0000003D] @ (A_data_stat1[0x0000003C] @ (A_data_stat1[0x0000003B] @ (A_data_stat1[0x0000003A] @ (A_data_stat1[0x00000039] @ A_data_stat1[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (B_data_stat2[0x0000000B] @ (B_data_stat2[0x0000000A] @ (B_data_stat2[0x00000009] @ B_data_stat2[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(B_data_stat2[0x0000003F] @ (B_data_stat2[0x0000003E] @ (B_data_stat2[0x0000003D] @ (B_data_stat2[0x0000003C] @ (B_data_stat2[0x0000003B] @ (B_data_stat2[0x0000003A] @ (B_data_stat2[0x00000039] @ B_data_stat2[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (stdin_stat3[0x0000000B] @ (stdin_stat3[0x0000000A] @ (stdin_stat3[0x00000009] @ stdin_stat3[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(stdin_stat3[0x0000003F] @ (stdin_stat3[0x0000003E] @ (stdin_stat3[0x0000003D] @ (stdin_stat3[0x0000003C] @ (stdin_stat3[0x0000003B] @ (stdin_stat3[0x0000003A] @ (stdin_stat3[0x00000039] @ stdin_stat3[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (stdout_stat4[0x0000000B] @ (stdout_stat4[0x0000000A] @ (stdout_stat4[0x00000009] @ stdout_stat4[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(stdout_stat4[0x0000003F] @ (stdout_stat4[0x0000003E] @ (stdout_stat4[0x0000003D] @ (stdout_stat4[0x0000003C] @ (stdout_stat4[0x0000003B] @ (stdout_stat4[0x0000003A] @ (stdout_stat4[0x00000039] @ stdout_stat4[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( (0x2B = arg005[0x00000000]
) );
ASSERT( ( NOT( (0x2E = arg005[0x00000002]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000002]
))) );
ASSERT( ( NOT( (0x2E = arg005[0x00000003]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000003]
))) );
ASSERT( ( NOT( (0x2E = arg005[0x00000004]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000004]
))) );
ASSERT( ( NOT( (0x2E = arg005[0x00000005]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000005]
))) );
ASSERT( ( NOT( (0x2E = arg005[0x00000006]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000006]
))) );
ASSERT( (0x00 = arg005[0x00000007]
) );
ASSERT( (0x30 = arg005[0x00000001]
) );
ASSERT( ( NOT( (0x00000000 = (0xFFFFFFEF & IF((0x58 = (0xDF & arg005[0x00000002]
)
))
THEN 0x00000010
ELSE 0x00000008
ENDIF
)
))) );
ASSERT( ( NOT( SBVGT((0x000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000002],32)
)
[7:0]
),0x00000009)
)) );
ASSERT( (LET let_k_0 = arg005[0x00000002] IN 
SBVGT(IF((0x58 = (0xDF & let_k_0
)
))
THEN 0x00000010
ELSE 0x00000008
ENDIF,(0x000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(let_k_0,32)
)
[7:0]
))
)  );
ASSERT( ( NOT( SBVGT((0x000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000003],32)
)
[7:0]
),0x00000009)
)) );
ASSERT( SBVGT(IF((0x58 = (0xDF & arg005[0x00000002]
)
))
THEN 0x00000010
ELSE 0x00000008
ENDIF,(0x000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000003],32)
)
[7:0]
))
 );
ASSERT( ( NOT( SBVGT((0x000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000004],32)
)
[7:0]
),0x00000009)
)) );
ASSERT( SBVGT(IF((0x58 = (0xDF & arg005[0x00000002]
)
))
THEN 0x00000010
ELSE 0x00000008
ENDIF,(0x000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000004],32)
)
[7:0]
))
 );
ASSERT( ( NOT( SBVGT((0x000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000005],32)
)
[7:0]
),0x00000009)
)) );
ASSERT( SBVGT(IF((0x58 = (0xDF & arg005[0x00000002]
)
))
THEN 0x00000010
ELSE 0x00000008
ENDIF,(0x000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000005],32)
)
[7:0]
))
 );
ASSERT( SBVGT((0x000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000006],32)
)
[7:0]
),0x00000009)
 );
ASSERT( ( NOT( SBVGT(0x00000041,BVSX(arg005[0x00000006],32)
)
)) );
ASSERT( (0x42 = BVSX(arg005[0x00000006],32)
[7:0]
) );
ASSERT( (LET let_k_0 = BVSX(IF((0x58 = (0xDF & arg005[0x00000002]
)
))
THEN 0x00000010
ELSE 0x00000008
ENDIF,64)
,
let_k_1 = arg005[0x00000002],
let_k_2 = BVPLUS(64, 
(0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000005],32)
)
[7:0]
), 
BVMULT(64, 
let_k_0, 
BVPLUS(64, 
(0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000004],32)
)
[7:0]
), 
BVMULT(64, 
let_k_0, 
BVPLUS(64, 
BVMULT(64, 
let_k_0, 
(0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(let_k_1,32)
)
[7:0]
))
, 
(0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000003],32)
)
[7:0]
))
)
)
)
)
 IN 
( NOT( (0x0000000000000000 = IF(BVGT(BVMULT(128, 
0x00000000000000000000000000000400, 
(0x0000000000000000 @ let_k_2
))
,0x0000000000000000FFFFFFFFFFFFFFFF)
)
THEN 0xFFFFFFFFFFFFFFFF
ELSE (let_k_2[53:0] @ 0b0000000000
)
ENDIF
))))  );
ASSERT( ( NOT( (0x8 = stdin_stat3[0x00000019][7:4]
))) );
ASSERT( (LET let_k_0 = BVSX(IF((0x58 = (0xDF & arg005[0x00000002]
)
))
THEN 0x00000010
ELSE 0x00000008
ENDIF,64)
,
let_k_1 = arg005[0x00000002],
let_k_2 = BVPLUS(64, 
(0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000005],32)
)
[7:0]
), 
BVMULT(64, 
let_k_0, 
BVPLUS(64, 
(0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000004],32)
)
[7:0]
), 
BVMULT(64, 
let_k_0, 
BVPLUS(64, 
BVMULT(64, 
let_k_0, 
(0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(let_k_1,32)
)
[7:0]
))
, 
(0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000003],32)
)
[7:0]
))
)
)
)
)
 IN 
( NOT( BVGT(0x0000000000000008,(0b000 @ (0b000 @ (0b000 @ IF(BVGT(BVMULT(128, 
0x00000000000000000000000000000400, 
(0x0000000000000000 @ let_k_2
))
,0x0000000000000000FFFFFFFFFFFFFFFF)
)
THEN 0xFFFFFFFFFFFFFFFF
ELSE (let_k_2[53:0] @ 0b0000000000
)
ENDIF[63:3]
)[63:3]
)[63:3]
))
)))  );
ASSERT( (LET let_k_0 = BVSX(IF((0x58 = (0xDF & arg005[0x00000002]
)
))
THEN 0x00000010
ELSE 0x00000008
ENDIF,64)
,
let_k_1 = arg005[0x00000002],
let_k_2 = BVPLUS(64, 
(0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000005],32)
)
[7:0]
), 
BVMULT(64, 
let_k_0, 
BVPLUS(64, 
(0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000004],32)
)
[7:0]
), 
BVMULT(64, 
let_k_0, 
BVPLUS(64, 
BVMULT(64, 
let_k_0, 
(0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(let_k_1,32)
)
[7:0]
))
, 
(0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000003],32)
)
[7:0]
))
)
)
)
)
 IN 
( NOT( BVGT(0x0000000000000008,(0b000 @ (0b000 @ (0b000 @ (0b000 @ IF(BVGT(BVMULT(128, 
0x00000000000000000000000000000400, 
(0x0000000000000000 @ let_k_2
))
,0x0000000000000000FFFFFFFFFFFFFFFF)
)
THEN 0xFFFFFFFFFFFFFFFF
ELSE (let_k_2[53:0] @ 0b0000000000
)
ENDIF[63:3]
)[63:3]
)[63:3]
)[63:3]
))
)))  );
ASSERT( (LET let_k_0 = BVSX(IF((0x58 = (0xDF & arg005[0x00000002]
)
))
THEN 0x00000010
ELSE 0x00000008
ENDIF,64)
,
let_k_1 = arg005[0x00000002],
let_k_2 = BVPLUS(64, 
(0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000005],32)
)
[7:0]
), 
BVMULT(64, 
let_k_0, 
BVPLUS(64, 
(0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000004],32)
)
[7:0]
), 
BVMULT(64, 
let_k_0, 
BVPLUS(64, 
BVMULT(64, 
let_k_0, 
(0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(let_k_1,32)
)
[7:0]
))
, 
(0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000003],32)
)
[7:0]
))
)
)
)
)
 IN 
( NOT( BVGT(0x0000000000000008,(0b000 @ (0b000 @ (0b000 @ (0b000 @ (0b000 @ IF(BVGT(BVMULT(128, 
0x00000000000000000000000000000400, 
(0x0000000000000000 @ let_k_2
))
,0x0000000000000000FFFFFFFFFFFFFFFF)
)
THEN 0xFFFFFFFFFFFFFFFF
ELSE (let_k_2[53:0] @ 0b0000000000
)
ENDIF[63:3]
)[63:3]
)[63:3]
)[63:3]
)[63:3]
))
)))  );
ASSERT( (LET let_k_0 = BVSX(IF((0x58 = (0xDF & arg005[0x00000002]
)
))
THEN 0x00000010
ELSE 0x00000008
ENDIF,64)
,
let_k_1 = arg005[0x00000002],
let_k_2 = BVPLUS(64, 
(0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000005],32)
)
[7:0]
), 
BVMULT(64, 
let_k_0, 
BVPLUS(64, 
(0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000004],32)
)
[7:0]
), 
BVMULT(64, 
let_k_0, 
BVPLUS(64, 
BVMULT(64, 
let_k_0, 
(0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(let_k_1,32)
)
[7:0]
))
, 
(0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000003],32)
)
[7:0]
))
)
)
)
)
 IN 
BVGT(0x0000000000000008,(0b000 @ (0b000 @ (0b000 @ (0b000 @ (0b000 @ (0b000 @ IF(BVGT(BVMULT(128, 
0x00000000000000000000000000000400, 
(0x0000000000000000 @ let_k_2
))
,0x0000000000000000FFFFFFFFFFFFFFFF)
)
THEN 0xFFFFFFFFFFFFFFFF
ELSE (let_k_2[53:0] @ 0b0000000000
)
ENDIF[63:3]
)[63:3]
)[63:3]
)[63:3]
)[63:3]
)[63:3]
))
)  );
%----------------------------------------------------
QUERY( FALSE  );
