n_args0  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
A_data_stat1  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
B_data_stat2  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdin_stat3  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdout_stat4  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg005  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg016  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg027  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg038  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
%----------------------------------------------------
ASSERT( ((((0x01 = n_args0[0x00000000]
) AND (0x00 = n_args0[0x00000001]
)
) AND (0x00 = n_args0[0x00000002]
)
) AND (0x00 = n_args0[0x00000003]
)
) );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (A_data_stat1[0x0000000B] @ (A_data_stat1[0x0000000A] @ (A_data_stat1[0x00000009] @ A_data_stat1[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(A_data_stat1[0x0000003F] @ (A_data_stat1[0x0000003E] @ (A_data_stat1[0x0000003D] @ (A_data_stat1[0x0000003C] @ (A_data_stat1[0x0000003B] @ (A_data_stat1[0x0000003A] @ (A_data_stat1[0x00000039] @ A_data_stat1[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (B_data_stat2[0x0000000B] @ (B_data_stat2[0x0000000A] @ (B_data_stat2[0x00000009] @ B_data_stat2[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(B_data_stat2[0x0000003F] @ (B_data_stat2[0x0000003E] @ (B_data_stat2[0x0000003D] @ (B_data_stat2[0x0000003C] @ (B_data_stat2[0x0000003B] @ (B_data_stat2[0x0000003A] @ (B_data_stat2[0x00000039] @ B_data_stat2[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (stdin_stat3[0x0000000B] @ (stdin_stat3[0x0000000A] @ (stdin_stat3[0x00000009] @ stdin_stat3[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(stdin_stat3[0x0000003F] @ (stdin_stat3[0x0000003E] @ (stdin_stat3[0x0000003D] @ (stdin_stat3[0x0000003C] @ (stdin_stat3[0x0000003B] @ (stdin_stat3[0x0000003A] @ (stdin_stat3[0x00000039] @ stdin_stat3[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (stdout_stat4[0x0000000B] @ (stdout_stat4[0x0000000A] @ (stdout_stat4[0x00000009] @ stdout_stat4[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(stdout_stat4[0x0000003F] @ (stdout_stat4[0x0000003E] @ (stdout_stat4[0x0000003D] @ (stdout_stat4[0x0000003C] @ (stdout_stat4[0x0000003B] @ (stdout_stat4[0x0000003A] @ (stdout_stat4[0x00000039] @ stdout_stat4[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( (0x2D = arg005[0x00000000]
) );
ASSERT( (0x2D = arg005[0x00000001]
) );
ASSERT( ( NOT( (0x00 = arg005[0x00000009]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000009]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000000A]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000000A]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000000B]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000000B]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000000C]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000000C]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000000D]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000000D]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000000E]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000000E]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000000F]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000000F]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000010]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000010]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000011]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000011]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000012]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000012]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000013]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000013]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000014]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000014]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000015]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000015]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000016]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000016]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000017]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000017]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000018]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000018]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000019]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000019]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000001A]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000001A]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000001B]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000001B]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000001C]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000001C]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000001D]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000001D]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000001E]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000001E]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000001F]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000001F]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000020]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000020]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000021]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000021]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000022]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000022]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000023]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000023]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000024]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000024]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000025]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000025]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000026]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000026]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000027]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000027]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000028]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000028]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000029]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000029]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000002A]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000002A]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000002B]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000002B]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000002C]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000002C]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000002D]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000002D]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000002E]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000002E]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000002F]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000002F]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000030]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000030]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000031]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000031]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000032]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000032]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000033]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000033]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000034]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000034]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000035]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000035]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000036]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000036]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000037]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000037]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000038]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000038]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000039]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000039]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000003A]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000003A]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000003B]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000003B]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000003C]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000003C]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000003D]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000003D]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000003E]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000003E]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000003F]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000003F]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000040]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000040]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000041]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000041]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000042]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000042]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000043]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000043]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000044]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000044]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000045]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000045]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000046]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000046]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000047]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000047]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000048]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000048]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000049]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000049]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000004A]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000004A]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000004B]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000004B]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000004C]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000004C]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000004D]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000004D]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000004E]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000004E]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000004F]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000004F]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000050]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000050]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000051]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000051]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000052]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000052]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000053]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000053]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000054]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000054]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000055]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000055]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000056]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000056]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000057]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000057]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000058]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000058]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000059]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000059]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000005A]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000005A]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000005B]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000005B]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000005C]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000005C]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000005D]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000005D]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000005E]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000005E]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000005F]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000005F]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000060]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000060]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000061]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000061]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000062]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000062]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000063]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000063]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000064]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000064]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000065]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000065]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000066]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000066]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000067]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000067]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000068]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000068]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000069]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000069]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000006A]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000006A]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000006B]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000006B]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000006C]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000006C]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000006D]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000006D]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000006E]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000006E]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000006F]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000006F]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000070]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000070]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000071]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000071]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000072]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000072]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000073]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000073]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000074]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000074]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000075]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000075]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000076]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000076]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000077]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000077]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000078]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000078]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000079]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000079]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000007A]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000007A]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000007B]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000007B]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000007C]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000007C]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000007D]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000007D]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000007E]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000007E]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000007F]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000007F]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000080]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000080]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000081]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000081]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000082]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000082]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000083]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000083]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000084]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000084]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000085]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000085]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000086]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000086]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000087]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000087]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000088]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000088]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000089]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000089]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000008A]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000008A]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000008B]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000008B]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000008C]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000008C]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000008D]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000008D]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000008E]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000008E]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x0000008F]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x0000008F]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000090]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000090]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000091]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000091]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000092]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000092]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000093]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000093]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000094]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000094]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000095]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000095]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000096]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000096]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000097]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000097]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000098]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000098]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000099]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000099]
))) );
ASSERT( (0x00 = arg005[0x0000009A]
) );
ASSERT( (0x76 = arg005[0x00000002]
) );
ASSERT( (0x65 = arg005[0x00000003]
) );
ASSERT( (0x72 = arg005[0x00000004]
) );
ASSERT( (0x73 = arg005[0x00000005]
) );
ASSERT( (0x69 = arg005[0x00000006]
) );
ASSERT( (0x6F = arg005[0x00000007]
) );
ASSERT( (0x6E = arg005[0x00000008]
) );
%----------------------------------------------------
QUERY( FALSE  );
