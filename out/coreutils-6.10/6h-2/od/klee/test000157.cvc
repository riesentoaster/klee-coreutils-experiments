n_args0  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
A_data_stat1  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
B_data_stat2  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdin_stat3  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdout_stat4  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg005  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr16  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg017  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg028  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr29  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdin10  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr311  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr512  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr713  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3214  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3415  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
A_data16  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
B_data17  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4518  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6219  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7520  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr821  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7722  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8223  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1224  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr9025  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr11126  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr11727  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr12128  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr12229  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr12830  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr13531  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr14232  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr14333  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr14534  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr15035  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr15236  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr15837  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr16238  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr16439  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr16940  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr17541  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr17642  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr18343  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr18644  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr19945  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr20046  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr20247  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr20348  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr20749  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr20950  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr21051  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr21552  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr22253  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr22454  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr23255  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr23556  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr24157  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr24258  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr24359  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr24460  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr24561  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr24962  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr25163  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr25264  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr25365  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr25466  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr25667  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr25868  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr25969  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr26170  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr26871  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr27272  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr27473  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr28174  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr28375  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr28676  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr29277  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr29378  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr29479  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr29780  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr29881  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr30082  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr30183  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr30284  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr30685  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr30786  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr31087  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr31188  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr31289  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr31490  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr31591  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr31892  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr32393  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr32494  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr32995  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr33196  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr33397  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr33598  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr33699  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr337100  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr338101  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
%----------------------------------------------------
ASSERT( ((((0x01 = n_args0[0x00000000]
) AND (0x00 = n_args0[0x00000001]
)
) AND (0x00 = n_args0[0x00000002]
)
) AND (0x00 = n_args0[0x00000003]
)
) );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (A_data_stat1[0x0000000B] @ (A_data_stat1[0x0000000A] @ (A_data_stat1[0x00000009] @ A_data_stat1[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(A_data_stat1[0x0000003F] @ (A_data_stat1[0x0000003E] @ (A_data_stat1[0x0000003D] @ (A_data_stat1[0x0000003C] @ (A_data_stat1[0x0000003B] @ (A_data_stat1[0x0000003A] @ (A_data_stat1[0x00000039] @ A_data_stat1[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (B_data_stat2[0x0000000B] @ (B_data_stat2[0x0000000A] @ (B_data_stat2[0x00000009] @ B_data_stat2[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(B_data_stat2[0x0000003F] @ (B_data_stat2[0x0000003E] @ (B_data_stat2[0x0000003D] @ (B_data_stat2[0x0000003C] @ (B_data_stat2[0x0000003B] @ (B_data_stat2[0x0000003A] @ (B_data_stat2[0x00000039] @ B_data_stat2[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (stdin_stat3[0x0000000B] @ (stdin_stat3[0x0000000A] @ (stdin_stat3[0x00000009] @ stdin_stat3[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(stdin_stat3[0x0000003F] @ (stdin_stat3[0x0000003E] @ (stdin_stat3[0x0000003D] @ (stdin_stat3[0x0000003C] @ (stdin_stat3[0x0000003B] @ (stdin_stat3[0x0000003A] @ (stdin_stat3[0x00000039] @ stdin_stat3[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (stdout_stat4[0x0000000B] @ (stdout_stat4[0x0000000A] @ (stdout_stat4[0x00000009] @ stdout_stat4[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(stdout_stat4[0x0000003F] @ (stdout_stat4[0x0000003E] @ (stdout_stat4[0x0000003D] @ (stdout_stat4[0x0000003C] @ (stdout_stat4[0x0000003B] @ (stdout_stat4[0x0000003A] @ (stdout_stat4[0x00000039] @ stdout_stat4[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( (0x2D = arg005[0x00000000]
) );
ASSERT( (0x2D = arg005[0x00000001]
) );
ASSERT( (0x3D = arg005[0x00000003]
) );
ASSERT( (0x66 = arg005[0x00000002]
) );
ASSERT( ( NOT( (0x00 = arg005[0x00000005]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000006]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000007]
))) );
ASSERT( (0x00 = arg005[0x00000008]
) );
ASSERT( (0x66 = arg005[0x00000004]
) );
ASSERT( ( NOT( (0x44 = arg005[0x00000005]
))) );
ASSERT( ( NOT( (0x46 = arg005[0x00000005]
))) );
ASSERT( ( NOT( (0x4C = arg005[0x00000005]
))) );
ASSERT( BVGT(0x0000000A,BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000005],32)
)
)
 );
ASSERT( BVGT(0x0000000A,BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000006],32)
)
)
 );
ASSERT( BVGT(0x0000000A,BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000007],32)
)
)
 );
ASSERT( (LET let_k_0 = BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000005],32)
)
,64)
,
let_k_1 = BVPLUS(64, 
BVPLUS(64, 
(let_k_0[60:0] @ 0b000
), 
(let_k_0[62:0] @ 0b0
))
, 
BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000006],32)
)
,64)
)
 IN 
( NOT( BVGT(BVPLUS(64, 
BVPLUS(64, 
(let_k_1[60:0] @ 0b000
), 
(let_k_1[62:0] @ 0b0
))
, 
BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000007],32)
)
,64)
)
,0x0000000000000010)
)))  );
ASSERT( (LET let_k_0 = BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000005],32)
)
,64)
,
let_k_1 = BVPLUS(64, 
BVPLUS(64, 
(let_k_0[60:0] @ 0b000
), 
(let_k_0[62:0] @ 0b0
))
, 
BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000006],32)
)
,64)
)
,
let_k_2 = ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((const_arr24157 WITH [0x00000000] := 0x00)
 WITH [0x00000001] := 0x00)
 WITH [0x00000002] := 0x00)
 WITH [0x00000003] := 0x00)
 WITH [0x00000004] := 0x00)
 WITH [0x00000005] := 0x00)
 WITH [0x00000006] := 0x00)
 WITH [0x00000007] := 0x00)
 WITH [0x00000008] := 0x00)
 WITH [0x00000009] := 0x00)
 WITH [0x0000000A] := 0x00)
 WITH [0x0000000B] := 0x00)
 WITH [0x0000000C] := 0x00)
 WITH [0x0000000D] := 0x00)
 WITH [0x0000000E] := 0x00)
 WITH [0x0000000F] := 0x00)
 WITH [0x00000010] := 0x06)
 WITH [0x00000011] := 0x00)
 WITH [0x00000012] := 0x00)
 WITH [0x00000013] := 0x00)
 WITH [0x00000014] := 0x00)
 WITH [0x00000015] := 0x00)
 WITH [0x00000016] := 0x00)
 WITH [0x00000017] := 0x00)
 WITH [0x00000018] := 0x00)
 WITH [0x00000019] := 0x00)
 WITH [0x0000001A] := 0x00)
 WITH [0x0000001B] := 0x00)
 WITH [0x0000001C] := 0x00)
 WITH [0x0000001D] := 0x00)
 WITH [0x0000001E] := 0x00)
 WITH [0x0000001F] := 0x00)
 WITH [0x00000020] := 0x07)
 WITH [0x00000021] := 0x00)
 WITH [0x00000022] := 0x00)
 WITH [0x00000023] := 0x00)
 WITH [0x00000024] := 0x00)
 WITH [0x00000025] := 0x00)
 WITH [0x00000026] := 0x00)
 WITH [0x00000027] := 0x00)
 WITH [0x00000028] := 0x00)
 WITH [0x00000029] := 0x00)
 WITH [0x0000002A] := 0x00)
 WITH [0x0000002B] := 0x00)
 WITH [0x0000002C] := 0x00)
 WITH [0x0000002D] := 0x00)
 WITH [0x0000002E] := 0x00)
 WITH [0x0000002F] := 0x00)
 WITH [0x00000030] := 0x00)
 WITH [0x00000031] := 0x00)
 WITH [0x00000032] := 0x00)
 WITH [0x00000033] := 0x00)
 WITH [0x00000034] := 0x00)
 WITH [0x00000035] := 0x00)
 WITH [0x00000036] := 0x00)
 WITH [0x00000037] := 0x00)
 WITH [0x00000038] := 0x00)
 WITH [0x00000039] := 0x00)
 WITH [0x0000003A] := 0x00)
 WITH [0x0000003B] := 0x00)
 WITH [0x0000003C] := 0x00)
 WITH [0x0000003D] := 0x00)
 WITH [0x0000003E] := 0x00)
 WITH [0x0000003F] := 0x00)
 WITH [0x00000040] := 0x08)
 WITH [0x00000041] := 0x00)
 WITH [0x00000042] := 0x00)
 WITH [0x00000043] := 0x00)
,
let_k_3 = (BVPLUS(64, 
BVPLUS(64, 
(let_k_1[60:0] @ 0b000
), 
(let_k_1[62:0] @ 0b0
))
, 
BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000007],32)
)
,64)
)
[61:0] @ 0b00
)[31:0] IN 
((((0x00 = let_k_2[let_k_3]
) AND (0x00 = let_k_2[BVPLUS(32, 
0x00000001, 
let_k_3)
]
)
) AND (0x00 = let_k_2[BVPLUS(32, 
0x00000002, 
let_k_3)
]
)
) AND (0x00 = let_k_2[BVPLUS(32, 
0x00000003, 
let_k_3)
]
)
))  );
ASSERT( (LET let_k_0 = arg005[0x00000006] IN 
((0x31 = let_k_0
) OR (0x30 = let_k_0
)
))  );
ASSERT( (LET let_k_0 = arg005[0x00000007] IN 
((0x37 = let_k_0
) OR ((0x36 = let_k_0
) OR ((0x35 = let_k_0
) OR ((0x34 = let_k_0
) OR ((0x33 = let_k_0
) OR ((0x32 = let_k_0
) OR ((0x31 = let_k_0
) OR ((0x30 = let_k_0
) OR (0x39 = let_k_0
)
)
)
)
)
)
)
)
))  );
ASSERT( (LET let_k_0 = BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000005],32)
)
,64)
,
let_k_1 = BVPLUS(64, 
BVPLUS(64, 
(let_k_0[60:0] @ 0b000
), 
(let_k_0[62:0] @ 0b0
))
, 
BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000006],32)
)
,64)
)
,
let_k_2 = BVPLUS(64, 
BVPLUS(64, 
(let_k_1[60:0] @ 0b000
), 
(let_k_1[62:0] @ 0b0
))
, 
BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg005[0x00000007],32)
)
,64)
)
 IN 
( NOT( (0x00000000 = (BVDIV(32, 
let_k_2[31:0], 
0x0000000A)
 | let_k_2[63:32]
)
))))  );
%----------------------------------------------------
QUERY( FALSE  );
