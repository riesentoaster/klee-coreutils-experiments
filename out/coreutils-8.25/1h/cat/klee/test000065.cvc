n_args0  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
n_args_11  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
A_data_stat2  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdin_stat3  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdout_stat4  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg005  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg016  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg027  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg008  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr19  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr210  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr311  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdin12  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr413  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr514  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr615  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr716  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr817  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr918  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1019  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1120  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1221  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1322  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1423  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1524  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1625  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1726  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1827  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1928  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2029  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2130  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2231  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2432  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2533  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2634  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2735  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2836  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2937  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3038  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3139  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3240  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3341  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3442  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3543  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3644  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3745  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3846  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3947  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4048  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4149  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
%----------------------------------------------------
ASSERT( BVGT(0x00000002,(n_args0[0x00000003] @ (n_args0[0x00000002] @ (n_args0[0x00000001] @ n_args0[0x00000000]
)
)
))
 );
ASSERT( SBVGT((n_args0[0x00000003] @ (n_args0[0x00000002] @ (n_args0[0x00000001] @ n_args0[0x00000000]
)
)
),0x00000000)
 );
ASSERT( BVGT(0x00000003,(n_args_11[0x00000003] @ (n_args_11[0x00000002] @ (n_args_11[0x00000001] @ n_args_11[0x00000000]
)
)
))
 );
ASSERT( SBVGT((n_args_11[0x00000003] @ (n_args_11[0x00000002] @ (n_args_11[0x00000001] @ n_args_11[0x00000000]
)
)
),0x00000000)
 );
ASSERT( ( NOT( ((((0x01 = n_args_11[0x00000000]
) AND (0x00 = n_args_11[0x00000001]
)
) AND (0x00 = n_args_11[0x00000002]
)
) AND (0x00 = n_args_11[0x00000003]
)
))) );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (A_data_stat2[0x0000000B] @ (A_data_stat2[0x0000000A] @ (A_data_stat2[0x00000009] @ A_data_stat2[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(A_data_stat2[0x0000003F] @ (A_data_stat2[0x0000003E] @ (A_data_stat2[0x0000003D] @ (A_data_stat2[0x0000003C] @ (A_data_stat2[0x0000003B] @ (A_data_stat2[0x0000003A] @ (A_data_stat2[0x00000039] @ A_data_stat2[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (stdin_stat3[0x0000000B] @ (stdin_stat3[0x0000000A] @ (stdin_stat3[0x00000009] @ stdin_stat3[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(stdin_stat3[0x0000003F] @ (stdin_stat3[0x0000003E] @ (stdin_stat3[0x0000003D] @ (stdin_stat3[0x0000003C] @ (stdin_stat3[0x0000003B] @ (stdin_stat3[0x0000003A] @ (stdin_stat3[0x00000039] @ stdin_stat3[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( BVGT(0x0000000000010000,(stdout_stat4[0x0000003F] @ (stdout_stat4[0x0000003E] @ (stdout_stat4[0x0000003D] @ (stdout_stat4[0x0000003C] @ (stdout_stat4[0x0000003B] @ (stdout_stat4[0x0000003A] @ (stdout_stat4[0x00000039] @ stdout_stat4[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( (0x2D = arg005[0x00000000]
) );
ASSERT( ( NOT( (0x00 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x2D = arg005[0x00000001]
))) );
ASSERT( (0x62 = BVSX(arg005[0x00000001],32)
[7:0]
) );
ASSERT( (0x00 = arg005[0x00000002]
) );
ASSERT( (0x2D = arg016[0x00000000]
) );
ASSERT( (0x00 = arg016[0x00000001]
) );
ASSERT( ( NOT( (((((((((0x34 = stdin_stat3[0x00000000]
) AND (0x00 = stdin_stat3[0x00000001]
)
) AND (0x10 = stdin_stat3[0x00000002]
)
) AND (0x00 = stdin_stat3[0x00000003]
)
) AND (0x00 = stdin_stat3[0x00000004]
)
) AND (0x00 = stdin_stat3[0x00000005]
)
) AND (0x00 = stdin_stat3[0x00000006]
)
) AND (0x00 = stdin_stat3[0x00000007]
)
) AND ((((((((0xCF = stdin_stat3[0x00000008]
) AND (0xC2 = stdin_stat3[0x00000009]
)
) AND (0x5E = stdin_stat3[0x0000000A]
)
) AND (0x00 = stdin_stat3[0x0000000B]
)
) AND (0x00 = stdin_stat3[0x0000000C]
)
) AND (0x00 = stdin_stat3[0x0000000D]
)
) AND (0x00 = stdin_stat3[0x0000000E]
)
) AND (0x00 = stdin_stat3[0x0000000F]
)
)
))) );
ASSERT( ( NOT( (0x2 = stdin_stat3[0x00000019][7:4]
))) );
ASSERT( (LET let_k_0 = (stdin_stat3[0x0000003F] @ (stdin_stat3[0x0000003E] @ (stdin_stat3[0x0000003D] @ (stdin_stat3[0x0000003C] @ (stdin_stat3[0x0000003B] @ (stdin_stat3[0x0000003A] @ (stdin_stat3[0x00000039] @ stdin_stat3[0x00000038]
)
)
)
)
)
)
),
let_k_1 = BVGT(0x2000000000000001,let_k_0)
,
let_k_2 = IF((SBVGT(let_k_0,0x000000000001FFFF)
 AND let_k_1
))
THEN IF((SBVGT(let_k_0,0x0000000000000000)
 AND let_k_1
))
THEN let_k_0
ELSE 0x0000000000000200
ENDIF
ELSE 0x0000000000020000
ENDIF IN 
(0x0000000000000008 = IF(BVGT(let_k_2,0x0000000000000008)
)
THEN 0x0000000000000008
ELSE let_k_2
ENDIF
))  );
ASSERT( (0x0A = stdin12[0x00000000]
) );
ASSERT( (0x0A = stdin12[0x00000001]
) );
ASSERT( (0x0A = stdin12[0x00000002]
) );
ASSERT( (0x0A = stdin12[0x00000003]
) );
ASSERT( (0x0A = stdin12[0x00000004]
) );
ASSERT( (0x0A = stdin12[0x00000005]
) );
ASSERT( (0x0A = stdin12[0x00000006]
) );
ASSERT( (0x0A = stdin12[0x00000007]
) );
ASSERT( (0x2F = arg027[0x00000000]
) );
ASSERT( (0x74 = arg027[0x00000001]
) );
ASSERT( (0x8 = stdout_stat4[0x00000019][7:4]
) );
ASSERT( ((((((((0x34 = stdout_stat4[0x00000000]
) AND (0x00 = stdout_stat4[0x00000001]
)
) AND (0x10 = stdout_stat4[0x00000002]
)
) AND (0x00 = stdout_stat4[0x00000003]
)
) AND (0x00 = stdout_stat4[0x00000004]
)
) AND (0x00 = stdout_stat4[0x00000005]
)
) AND (0x00 = stdout_stat4[0x00000006]
)
) AND (0x00 = stdout_stat4[0x00000007]
)
) );
ASSERT( ((((((((0xCF = stdout_stat4[0x00000008]
) AND (0xC2 = stdout_stat4[0x00000009]
)
) AND (0x5E = stdout_stat4[0x0000000A]
)
) AND (0x00 = stdout_stat4[0x0000000B]
)
) AND (0x00 = stdout_stat4[0x0000000C]
)
) AND (0x00 = stdout_stat4[0x0000000D]
)
) AND (0x00 = stdout_stat4[0x0000000E]
)
) AND (0x00 = stdout_stat4[0x0000000F]
)
) );
%----------------------------------------------------
QUERY( FALSE  );
