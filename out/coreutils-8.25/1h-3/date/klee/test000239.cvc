n_args0  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
n_args_11  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
A_data_stat2  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdin_stat3  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdout_stat4  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg005  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg016  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg027  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg008  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr19  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr210  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdin11  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr412  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr513  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
A_data14  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr615  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr816  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr917  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1018  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1119  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1220  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1321  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1422  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1523  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1624  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1725  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1826  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1927  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2028  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2129  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2330  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2431  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2532  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2633  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2734  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2835  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2936  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3037  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3138  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2239  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3240  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3341  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3442  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3543  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3644  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3745  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3846  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3947  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4048  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4149  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4250  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4351  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4452  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4553  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4654  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4755  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4856  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4957  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5058  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5159  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5260  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5361  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5462  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5563  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5664  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5765  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5866  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5967  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6068  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6169  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6270  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6371  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6472  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6573  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6674  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6775  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6876  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6977  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7078  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7179  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7380  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7581  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7482  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7683  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7784  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7885  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7986  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8087  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8288  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8389  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8490  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8591  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8692  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8793  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8894  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8995  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr9096  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr9197  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr9298  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr9399  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr94100  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr95101  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr96102  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr97103  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr98104  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr99105  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr100106  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr101107  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr102108  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr103109  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr104110  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr105111  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr106112  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr107113  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr108114  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr109115  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr111116  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr112117  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr113118  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
%----------------------------------------------------
ASSERT( BVGT(0x00000002,(n_args0[0x00000003] @ (n_args0[0x00000002] @ (n_args0[0x00000001] @ n_args0[0x00000000]
)
)
))
 );
ASSERT( ( NOT( SBVGT((n_args0[0x00000003] @ (n_args0[0x00000002] @ (n_args0[0x00000001] @ n_args0[0x00000000]
)
)
),0x00000000)
)) );
ASSERT( BVGT(0x00000003,(n_args_11[0x00000003] @ (n_args_11[0x00000002] @ (n_args_11[0x00000001] @ n_args_11[0x00000000]
)
)
))
 );
ASSERT( SBVGT((n_args_11[0x00000003] @ (n_args_11[0x00000002] @ (n_args_11[0x00000001] @ n_args_11[0x00000000]
)
)
),0x00000000)
 );
ASSERT( ( NOT( ((((0x01 = n_args_11[0x00000000]
) AND (0x00 = n_args_11[0x00000001]
)
) AND (0x00 = n_args_11[0x00000002]
)
) AND (0x00 = n_args_11[0x00000003]
)
))) );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (A_data_stat2[0x0000000B] @ (A_data_stat2[0x0000000A] @ (A_data_stat2[0x00000009] @ A_data_stat2[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(A_data_stat2[0x0000003F] @ (A_data_stat2[0x0000003E] @ (A_data_stat2[0x0000003D] @ (A_data_stat2[0x0000003C] @ (A_data_stat2[0x0000003B] @ (A_data_stat2[0x0000003A] @ (A_data_stat2[0x00000039] @ A_data_stat2[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (stdin_stat3[0x0000000B] @ (stdin_stat3[0x0000000A] @ (stdin_stat3[0x00000009] @ stdin_stat3[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(stdin_stat3[0x0000003F] @ (stdin_stat3[0x0000003E] @ (stdin_stat3[0x0000003D] @ (stdin_stat3[0x0000003C] @ (stdin_stat3[0x0000003B] @ (stdin_stat3[0x0000003A] @ (stdin_stat3[0x00000039] @ stdin_stat3[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (stdout_stat4[0x0000000B] @ (stdout_stat4[0x0000000A] @ (stdout_stat4[0x00000009] @ stdout_stat4[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(stdout_stat4[0x0000003F] @ (stdout_stat4[0x0000003E] @ (stdout_stat4[0x0000003D] @ (stdout_stat4[0x0000003C] @ (stdout_stat4[0x0000003B] @ (stdout_stat4[0x0000003A] @ (stdout_stat4[0x00000039] @ stdout_stat4[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( (0x2D = arg008[0x00000000]
) );
ASSERT( ( NOT( (0x00 = arg008[0x00000001]
))) );
ASSERT( ( NOT( (0x2D = arg008[0x00000001]
))) );
ASSERT( (0x66 = BVSX(arg008[0x00000001],32)
[7:0]
) );
ASSERT( (0x2D = arg016[0x00000000]
) );
ASSERT( (0x00 = arg016[0x00000001]
) );
ASSERT( ( NOT( (0x0A = stdin11[0x00000000]
))) );
ASSERT( (0x0A = stdin11[0x00000001]
) );
ASSERT( BVGT(0x00000018,BVPLUS(32, 
0xFFFFFFF7, 
(0x000000 @ stdin11[0x00000000]
))
)
 );
ASSERT( (LET let_k_0 = BVPLUS(32, 
0xFFFFFFF7, 
(0x000000 @ stdin11[0x00000000]
))
,
let_k_1 = let_k_0[4:0] IN 
(0b0 = IF(BVGT(0x000018,let_k_0[23:0])
)
THEN IF((0b00000 = let_k_1
))
THEN 0x80001F
ELSE IF((0b00001 = let_k_1
))
THEN 0x40000F
ELSE IF((0b00010 = let_k_1
))
THEN 0x200007
ELSE IF((0b00011 = let_k_1
))
THEN 0x100003
ELSE IF((0b00100 = let_k_1
))
THEN 0x080001
ELSE IF((0b00101 = let_k_1
))
THEN 0x040000
ELSE IF((0b00110 = let_k_1
))
THEN 0x020000
ELSE IF((0b00111 = let_k_1
))
THEN 0x010000
ELSE IF((0b01000 = let_k_1
))
THEN 0x008000
ELSE IF((0b01001 = let_k_1
))
THEN 0x004000
ELSE IF((0b01010 = let_k_1
))
THEN 0x002000
ELSE IF((0b01011 = let_k_1
))
THEN 0x001000
ELSE IF((0b01100 = let_k_1
))
THEN 0x000800
ELSE IF((0b01101 = let_k_1
))
THEN 0x000400
ELSE IF((0b01110 = let_k_1
))
THEN 0x000200
ELSE IF((0b01111 = let_k_1
))
THEN 0x000100
ELSE IF((0b10000 = let_k_1
))
THEN 0x000080
ELSE IF((0b10001 = let_k_1
))
THEN 0x000040
ELSE IF((0b10010 = let_k_1
))
THEN 0x000020
ELSE IF((0b10011 = let_k_1
))
THEN 0x000010
ELSE IF((0b10100 = let_k_1
))
THEN 0x000008
ELSE IF((0b10101 = let_k_1
))
THEN 0x000004
ELSE IF((0b10110 = let_k_1
))
THEN 0x000002
ELSE IF((0b10111 = let_k_1
))
THEN 0x000001
ELSE 0x000000
ENDIF
ENDIF
ENDIF
ENDIF
ENDIF
ENDIF
ENDIF
ENDIF
ENDIF
ENDIF
ENDIF
ENDIF
ENDIF
ENDIF
ENDIF
ENDIF
ENDIF
ENDIF
ENDIF
ENDIF
ENDIF
ENDIF
ENDIF
ENDIF
ELSE 0x000000
ENDIF[0:0]
))  );
ASSERT( ( NOT( (0x2B = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x2D = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x38 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x39 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x3A = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x3B = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x3C = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x3D = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x3E = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x3F = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x30 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x31 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x32 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x33 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x34 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x35 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x36 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x37 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x28 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x29 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x2A = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x2B = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x2C = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x2D = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x2E = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x2F = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x20 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x21 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x22 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x23 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x24 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x25 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x26 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x27 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x08 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x09 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x0A = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x0B = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x0C = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x0D = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x00 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x07 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x78 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x79 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x7A = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x7B = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x7C = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x7D = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x7E = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x70 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x71 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x72 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x73 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x74 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x75 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x76 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x77 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x68 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x69 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x6A = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x6B = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x6C = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x6D = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x6E = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x6F = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x60 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x61 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x62 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x63 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x64 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x65 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x66 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x67 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x58 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x59 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x5A = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x5B = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x5C = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x5D = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x5E = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x5F = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x50 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x51 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x52 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x53 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x54 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x55 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x56 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x57 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x48 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x49 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x4A = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x4B = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x4C = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x4D = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x4E = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x4F = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x41 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x42 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x43 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x44 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x45 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x46 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x47 = stdin11[0x00000000]
))) );
ASSERT( ( NOT( (0x0A = stdin11[0x00000002]
))) );
ASSERT( ( NOT( (0x0A = stdin11[0x00000003]
))) );
ASSERT( ( NOT( (0x0A = stdin11[0x00000004]
))) );
ASSERT( ( NOT( (0x0A = stdin11[0x00000005]
))) );
ASSERT( ( NOT( (0x0A = stdin11[0x00000006]
))) );
ASSERT( ( NOT( (0x0A = stdin11[0x00000007]
))) );
%----------------------------------------------------
QUERY( FALSE  );
