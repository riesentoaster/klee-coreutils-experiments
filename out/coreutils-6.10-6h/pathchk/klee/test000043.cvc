n_args0  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
n_args_11  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
A_data_stat2  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdin_stat3  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdout_stat4  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg005  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg016  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg007  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr18  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr29  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr310  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr411  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr512  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr713  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr814  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr615  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr916  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1017  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1118  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1219  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1320  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1421  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1522  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1623  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1724  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1825  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1926  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
%----------------------------------------------------
ASSERT( BVGT(0x00000002,(n_args0[0x00000003] @ (n_args0[0x00000002] @ (n_args0[0x00000001] @ n_args0[0x00000000]
)
)
))
 );
ASSERT( SBVGT((n_args0[0x00000003] @ (n_args0[0x00000002] @ (n_args0[0x00000001] @ n_args0[0x00000000]
)
)
),0x00000000)
 );
ASSERT( BVGT(0x00000002,(n_args_11[0x00000003] @ (n_args_11[0x00000002] @ (n_args_11[0x00000001] @ n_args_11[0x00000000]
)
)
))
 );
ASSERT( SBVGT((n_args_11[0x00000003] @ (n_args_11[0x00000002] @ (n_args_11[0x00000001] @ n_args_11[0x00000000]
)
)
),0x00000000)
 );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (A_data_stat2[0x0000000B] @ (A_data_stat2[0x0000000A] @ (A_data_stat2[0x00000009] @ A_data_stat2[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(A_data_stat2[0x0000003F] @ (A_data_stat2[0x0000003E] @ (A_data_stat2[0x0000003D] @ (A_data_stat2[0x0000003C] @ (A_data_stat2[0x0000003B] @ (A_data_stat2[0x0000003A] @ (A_data_stat2[0x00000039] @ A_data_stat2[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (stdin_stat3[0x0000000B] @ (stdin_stat3[0x0000000A] @ (stdin_stat3[0x00000009] @ stdin_stat3[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(stdin_stat3[0x0000003F] @ (stdin_stat3[0x0000003E] @ (stdin_stat3[0x0000003D] @ (stdin_stat3[0x0000003C] @ (stdin_stat3[0x0000003B] @ (stdin_stat3[0x0000003A] @ (stdin_stat3[0x00000039] @ stdin_stat3[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (stdout_stat4[0x0000000B] @ (stdout_stat4[0x0000000A] @ (stdout_stat4[0x00000009] @ stdout_stat4[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(stdout_stat4[0x0000003F] @ (stdout_stat4[0x0000003E] @ (stdout_stat4[0x0000003D] @ (stdout_stat4[0x0000003C] @ (stdout_stat4[0x0000003B] @ (stdout_stat4[0x0000003A] @ (stdout_stat4[0x00000039] @ stdout_stat4[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( (0x2D = arg005[0x00000000]
) );
ASSERT( ( NOT( (0x2D = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000001]
))) );
ASSERT( (0x70 = BVSX(arg005[0x00000001],32)
[7:0]
) );
ASSERT( ( NOT( (0x00 = arg016[0x0000001B]
))) );
ASSERT( (0x00 = arg016[0x0000001C]
) );
ASSERT( (0x2F = arg016[0x00000000]
) );
ASSERT( (0x2F = arg016[0x00000001]
) );
ASSERT( (0x41 = arg016[0x00000002]
) );
ASSERT( (0x2F = arg016[0x00000003]
) );
ASSERT( (0x2F = arg016[0x00000004]
) );
ASSERT( (0x41 = arg016[0x00000005]
) );
ASSERT( (0x2F = arg016[0x00000006]
) );
ASSERT( (0x42 = arg016[0x00000007]
) );
ASSERT( (0x2F = arg016[0x00000008]
) );
ASSERT( (0x2F = arg016[0x00000009]
) );
ASSERT( (0x2F = arg016[0x0000000A]
) );
ASSERT( (0x2F = arg016[0x0000000B]
) );
ASSERT( (0x2F = arg016[0x0000000C]
) );
ASSERT( (0x42 = arg016[0x0000000D]
) );
ASSERT( (0x43 = arg016[0x0000000E]
) );
ASSERT( (0x2F = arg016[0x0000000F]
) );
ASSERT( (0x2F = arg016[0x00000010]
) );
ASSERT( (0x2F = arg016[0x00000011]
) );
ASSERT( (0x41 = arg016[0x00000012]
) );
ASSERT( (0x42 = arg016[0x00000013]
) );
ASSERT( (0x2F = arg016[0x00000014]
) );
ASSERT( (0x2F = arg016[0x00000015]
) );
ASSERT( (0x2F = arg016[0x00000016]
) );
ASSERT( (0x2F = arg016[0x00000017]
) );
ASSERT( (0x2F = arg016[0x00000018]
) );
ASSERT( (0x42 = arg016[0x00000019]
) );
ASSERT( (0x42 = arg016[0x0000001A]
) );
ASSERT( ( NOT( (0x2F = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x41 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x42 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x43 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x44 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x45 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x46 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x47 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x48 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x49 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x4A = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x4B = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x4C = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x4D = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x4E = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x4F = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x50 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x51 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x52 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x53 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x54 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x55 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x56 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x57 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x58 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x59 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x5A = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x61 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x62 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x63 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x64 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x65 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x66 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x67 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x68 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x69 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x6A = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x6B = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x6C = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x6D = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x6E = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x6F = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x70 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x71 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x72 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x73 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x74 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x75 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x76 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x77 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x78 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x79 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x7A = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x30 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x31 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x32 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x33 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x34 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x35 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x36 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x37 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x38 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x39 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x2E = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x5F = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x2D = arg016[0x0000001B]
))) );
ASSERT( ( NOT( SBVGT(0x00000080,(0x000000 @ arg016[0x0000001B]
))
)) );
ASSERT( ( NOT( (0x3A = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x3B = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x3C = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x3D = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x3E = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x3F = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x28 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x29 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x2A = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x2B = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x2C = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x20 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x21 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x22 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x23 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x24 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x25 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x26 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x27 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x08 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x09 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x0A = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x0B = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x0C = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x0D = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x07 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x7B = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x7C = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x7D = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x7E = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x60 = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x5B = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x5C = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x5D = arg016[0x0000001B]
))) );
ASSERT( ( NOT( (0x5E = arg016[0x0000001B]
))) );
%----------------------------------------------------
QUERY( FALSE  );
